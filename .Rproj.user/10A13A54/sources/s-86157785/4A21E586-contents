library(RSelenium)
library(rvest)
library(tidyverse)
library(lubridate)

driver <- rsDriver(browser = c("firefox"),port = 4447L)
remote_driver <- driver[["client"]]

remote_driver$open()

remote_driver$navigate("http://190.116.51.180:8080/dimexaproveedor/login.zul")

username<- remote_driver$findElement(using= "id", value="z_d__l")
username$clearElement()
username$sendKeysToElement(list("P625"))


passwd<-remote_driver$findElement(using="id",value="z_d__o")
passwd$clearElement()
passwd$sendKeysToElement(list("895623"))

login <- remote_driver$findElement(using = "id",value ="z_d__r")
login$clickElement()

# VENTA DETALLADA
ventadetallada <- remote_driver$findElement(using = "id",value = "z_d__u")
ventadetallada$clickElement()

# DESCARGANDO DATA PARA AREQUIPA
# LA PRIMERA UNIDAD AREQUIPA VIENE SELECCIONADA POR DEFECTO

# LINEA
LINEA <- remote_driver$findElement(using = "id",value = "z_d__a3-btn")
LINEA$clickElement()

# 128-LANSIER
LINEA128 <- remote_driver$findElement(using = "id",value = "z_d__h5-pp")
LINEA128$clickElement()

# DIVISION
DIVISION<- remote_driver$findElement(using = "id",value = "z_d__k5-btn")
DIVISION$clickElement()

# SALUD
SALUD<- remote_driver$findElement(using = "xpath",value = "/html/body/div[4]/table/tbody/tr[3]/td[2]")
SALUD$clickElement()

# BUSCANDO POR EL XPATH PUEDE SER UNA BUENA SOLUCION EN ALGUNOS CASOS
# DONDE NO ENCUENTRA NI MEDIANTE ID NI CSS



# PERIODO
PERIODO<- remote_driver$findElement(using = "id",value = "z_d__52-btn")
PERIODO$clickElement()

# NOVIEMBRE2021
NOVIEMBRE2021<- remote_driver$findElement(using = "id",value = "z_d__74 > td.z-comboitem-text")
NOVIEMBRE2021$clickElement()

# PROCESAR
PROCESAR<- remote_driver$findElement(using = "id",value = "z_d__b2")
PROCESAR$clickElement()

# EXPORTAR
EXPORTAR<- remote_driver$findElement(using = "id",value = "z_d__t3 > div > div")
EXPORTAR$clickElement()

# AHORA PARA PASAR A LA SIGUIENTE UNIDAD QUE SERIA HUANCAYO

# IGNORAR
IGNORAR<- remote_driver$findElement(using = "id",value = "z_d__u3 > div > div")
IGNORAR$clickElement()

# HASTA AQUI ME QUEDO, DE AQUI EN ADELANTE DEBERIA SER REPETIR LOS MISMOS PROCESOS DE ARRIBA PARA TODAS LAS ZONAS O UNIDADES
# NO HE AVANZADO CON METRONIC PORQUE EL VPN SE COLGO Y SIN EL VPN NO TENGO FORMA DE INSPECCIONA LA WEB

#--------------------------------------------------------------------------------------------------------#
#--------------------------------------------------------------------------------------------------------#
# --- FORMATEO DE DATA - FORMATEO DE DATA - FORMATEO DE DATA - FORMATEO DE DATA - FORMATEO DE DATA ----- #
#--------------------------------------------------------------------------------------------------------#
#--------------------------------------------------------------------------------------------------------#
# son 4 los departamentos que se descarga la data en dimexa
detalle <- read_xlsx("C:\\Users\\LBarrios\\Downloads\\detalle.xlsx")
detalle1 <- read_xlsx("C:\\Users\\LBarrios\\Downloads\\detalle (1).xlsx")
detalle2 <- read_xlsx("C:\\Users\\LBarrios\\Downloads\\detalle (2).xlsx")
detalle3 <- read_xlsx("C:\\Users\\LBarrios\\Downloads\\detalle (3).xlsx")

# combinando los 4 departamentos descargados de dimexa
data<-rbind(detalle,detalle1,detalle2,detalle3)
rm(detalle,detalle1,detalle2,detalle3)
# creando columna fuente que diga METRONIC
data<-data %>% mutate(FUENTE="DIMEXA")

# creando columna periodo con el primer dia del mes a actualizar
data<-data %>% mutate(periodo=paste0("01/",month(today()),"/",year(today())))

# insertando columna ELIMINAR en vacio
data<-data %>% mutate(ELIMINAR="")

# creando columna DSCZONA 
data<-data %>% mutate(DSCVEND="")

# creando ppuni ppsol flag dpto dist prov que estaran vacias
data<-data %>% mutate(ppuni="") %>% mutate(ppsol="") %>% mutate(flag="")

# seleccionando solo las columnas que nos interesan
# DATA2 TIENE EL FORMATO QUE SE CARGARIA AL SQL
# AQUI NO ESTOY PONIENDO ZONA NI DSCVEND NI TIPO NI EQUIPO
# NI ARTDESVALID PORQUE ESOS SERAN LOS QUE TRAERÉ CON EL MERGE
data2<-data %>%
  select(FUENTE,periodo,`NUMERO FACTURA`,FECHA,`RUC CLIENTE`,ELIMINAR,
         `NOMBRE CLIENTE`,`TIPO DOCUMENTO`,`NOMBRE PRODUCTO`,
         CANTIDAD,`SUB TOTAL`,`NOMBRE VENDEDOR`,ppuni,ppsol,flag,DEPARTAMENTO,DISTRITO,PROVINCIA)

# marcar una E en eliminar cuando el nombre del vendedor sea BRUNY CHAVEZ SALAS o MERCEDES COTRINA VERGEL
# primero identificamos la posicion de las filas donde esta bruny y mercedes
BRUNYNROW<-which(data2$`NOMBRE VENDEDOR` == "BRUNY CHAVEZ SALAS", arr.ind=TRUE)
MERCEDESNROW<-which(data2$`NOMBRE VENDEDOR` == "MERCEDES COTRINA VERGEL", arr.ind=TRUE)
# ahora le decimos que para esas filas ponga una E en la columna Eliminar
data2$ELIMINAR[BRUNYNROW]="E"
data2$ELIMINAR[MERCEDESNROW]="E"
# data$ELIMINAR[BRUNYNROW]
# write_xlsx(data,"dimexa.xlsx")
maestrolansier <- read_xlsx("maestrolansier.xlsx")
# selecciono solo lo que voy a querer de maestro lansier que para este caso seria DIMEXA artdesvalid tipo y equipo
df2<-maestrolansier %>% select(DIMEXA,`artdsc VALID`,TIPO,equipo)
# cambio el nombre a df2 para que coincida el nombre de la columna articulo para poder hacer el merge
colnames(df2)<-c("NOMBRE PRODUCTO","artdesvalid","tipo","equipo")
# CON ESTO QUITO LOS ESPACIOS AL COMIENZO Y EL FINAL DE LOS ARTICULOS PORQUE NO PERMITIAN CRUZAR TODO
data2$`NOMBRE PRODUCTO`<-trimws(data2$`NOMBRE PRODUCTO`,"b")
df2$`NOMBRE PRODUCTO`<-trimws(df2$`NOMBRE PRODUCTO`,"b")
df2$artdesvalid<-trimws(df2$artdesvalid,"b")
# ----------------------------------------------------- #
# ---CRUCE DE INFORMACIÓN PARA OBTENER LOS VALIDADOS--- #
# ----------------------------------------------------- #
# cruzando para obtener los validados, tipo y equipo
# ArtdesValid2<-merge(x = data2, y = df2, by.x = "NOMBRE PRODUCTO", all.x = TRUE)
# utilizamos con all.x = false porque de ese modo no trae las toallitas humedas ni alcohol en gel, dado que no
# son productos de lansier
data_maestro<-merge(x = data2, y = df2, by.x = "NOMBRE PRODUCTO", all.x = FALSE)
# CRUZANDO PARA OBTENER LA LOCALIDAD
# 1. concatenamos departamento + distrito de nuestra data_maestro para generar la llave
data_maestro<-data_maestro %>% mutate(LLAVE=paste0(DEPARTAMENTO,DISTRITO))
# TRAEMOS LA DATA DE LOCALIDADESDIMEXA
localidadesdimexa <- read_xlsx("localidadesdimexa.xlsx")
localidadesdimexa<-localidadesdimexa %>% select(LLAVE,ZONA)
# por alguna razon con allx=true da mas filas de las que existen, habra que verificar de donde agrega más
# mientras que con allx=false trae el mismo numero de filas que hay en data_maestro que al parecer
# deberia ser lo correcto, hay que revisar ello
ArtdesValid2<-merge(x = data_maestro, y=localidadesdimexa, by.x = "LLAVE", all.x = TRUE)
ArtdesValid3<-merge(x = data_maestro, y=localidadesdimexa, by.x = "LLAVE", all.x = FALSE)
write_xlsx(ArtdesValid3,"allxequalfalse.xlsx")
write_xlsx(ArtdesValid2,"allxequaltrue.xlsx")























