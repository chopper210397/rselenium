localidadescastillo<-localidadescastillo %>% select(Dist,ZONA)
localidadescastillo$Dist<-trimws(localidadescastillo$Dist,"b")
localidadescastillo$ZONA<-trimws(localidadescastillo$ZONA,"b")
data_maestro$Dist<-trimws(data_maestro$Dist,"b")
# convitiendo distritos a minusculas y escogiendo los distintos
localidadescastillo<-localidadescastillo %>%
distinct(tolower( Dist), .keep_all = TRUE) %>% select(ZONA,`tolower(Dist)`)
colnames(localidadescastillo)<-c("ZONA","Dist")
data_maestro$Dist<-tolower(data_maestro$Dist)
# VALIDANDO ZONAS NUEVAS
# PROBLEMA HALLADO: Las localides nuevas castillo son demasiadas porque al momento de hacer buscarV no esta encontrado casi nada
# ya que R no toma como igual una mayuscula y una minuscula  a diferencia de EXCEL.
# por lo tanto se debe poner a minuscula/mayuscula al menos para el cruce
# data_maestro$Dist[853]="villasalvajeje"
localidadesnuevascastillo<-data_maestro[!toupper(data_maestro$Dist) %in% toupper(localidadescastillo$Dist),]
write_xlsx(localidadesnuevascastillo,"localidadesnuevascastillo.xlsx")
# AQUI MANUALMENTE SE DEBE PREGUNTAR AL SEÑOR RICARDO A QUE ZONAS PERTENECEN ESAS NUEVAS LOCALIDADES, UNA VEZ AGREGADAS
# EN EL EXCEL DE LOCALIDADES DIMEXA YA SE DEBE REGRESAR A R Y CORRE                                                     R ESTA VEZ EL PROGRAMA COMPLETO
data_maestro_localidades<-merge(x = data_maestro, y=localidadescastillo, by.x = "Dist", all.x = TRUE)
data_maestro_localidades<-data_maestro_localidades %>%
select(FUENTE,periodo,Factura,Fecha,RUC,ELIMINAR,RazComercial,TIPO,`Dsc Producto`,artdesvalid,cantidad,
Total,DSCVEND,ZONA,Vendedor,tipo,equipo,ppuni,ppsol,flag,Dept,Dist,Prov)
# ERROR COMÚN: no deberia dar mas registros en data maestro localidades que en data maestro, deberían ser la misma
# cantidad de observaciones, esto ocurre porque en el archivo fuente hay filas repetidas lo cual esta mal y hace que el programa
# de errores, revisar esto en el archivo de localidades por lo general esto ocurre ahi porque hay repetidos
# x<-data_maestro[!data_maestro$COMBINACION %in% data_maestro_localidades$COMBINACION,]
# chequear que siempre data_maestro sea igual a data_maestro_localidades porque sino
write_xlsx(data_maestro_localidades,"castillo.xlsx")
# limpiando nuestra ventana
rm(list=ls())
# castillo
library(readxl)
library(dplyr)
library(lubridate)
library(readr)
library(RODBC)
library(qdapTools)
library(plyr)
library(lookup)
library(XLConnect)
library(writexl)
# especificamos los col_types porque la columna del total viene con formato posixct asi que debemos especificarle que es numeric
#--------------------- PARA CIERRE DE MES ---------------------#
# data<-read_xls("C:\\Users\\LBarrios\\Downloads\\CMES__LINEA__125.xls",skip = 1,
# col_types = c("text","text","text","date","text","text","text","text","text","text","text"
# ,"text","text","text","numeric","numeric"))
#--------------------- PARA DIA NORMAL ---------------------#
data<-read_xls("C:\\Users\\LBarrios\\Downloads\\AVANCE_LINEA_125.xls",skip = 1,
col_types = c("text","text","text","date","text","text","text","text","text","text","text"
,"text","text","text","numeric","numeric"))
# cambiando formato de la fecha
data$Fecha<-paste0(ifelse(day(data$Fecha)<10,paste0(0,day(data$Fecha)),day(data$Fecha)),
"-",
ifelse(month(data$Fecha)<10,paste0(0,month(data$Fecha)),month(data$Fecha))  ,
"-",
year(data$Fecha))
# creando columna fuente que diga METRONIC
data<-data %>% mutate(FUENTE="CASTILLO")
# creando columna periodo con el primer dia del mes a actualizar
data<-data %>% mutate(periodo=paste0("01/",
ifelse(month(today())<10,paste0("0",month(today())),month(today())),
"/",
year(today())))
# creando columna PERIODO CIERRE DE MES
# data<-data %>% mutate(periodo=paste0("01/",
#                                      ifelse(month(today())<10,paste0("0",month(today())-1),month(today())-1),
#                                      "/",
#                                      year(today())))
# insertando columna ELIMINAR en vacio
data<-data %>% mutate(ELIMINAR="")
# creando columna DSCZONA
data<-data %>% mutate(DSCVEND="")
# creando ppuni ppsol flag dpto dist prov que estaran vacias
data<-data %>% mutate(ppuni="") %>% mutate(ppsol="") %>% mutate(flag="") %>% mutate(TIPO="")
data2<-data %>%
select(FUENTE,periodo,Factura,Fecha,RUC,ELIMINAR,
RazComercial,TIPO,`Dsc Producto`,
cantidad,Total,DSCVEND,Vendedor,ppuni,ppsol,flag,Dept,Dist,Prov)
# LEYENDO DATA NECESARIA PARA VALIDAR
maestrolansier <- read_xlsx("maestrolansier.xlsx")
# selecciono solo lo que voy a querer de maestro lansier que para este caso seria DIMEXA artdesvalid tipo y equipo
df2<-maestrolansier %>% select(CASTILLO,`artdsc VALID`,TIPO,equipo)
# cambio el nombre a df2 para que coincida el nombre de la columna articulo para poder hacer el merge
colnames(df2)<-c("Dsc Producto","artdesvalid","tipo","equipo")
# CON ESTO QUITO LOS ESPACIOS AL COMIENZO Y EL FINAL DE LOS ARTICULOS PORQUE NO PERMITIAN CRUZAR TODO
data2$`Dsc Producto`<-trimws(data2$`Dsc Producto`,"b")
df2$`Dsc Producto`<-trimws(df2$`Dsc Producto`,"b")
df2$artdesvalid<-trimws(df2$artdesvalid,"b")
# PRODUCTOS NUEVOS ARTDESVALID
productosnuevoscastillo<-data2[!data2$`Dsc Producto` %in% df2$`Dsc Producto`,]
write_xlsx(productosnuevoscastillo,"productosnuevoscastillo.xlsx")
# TRAYENDO ARTDESVALID TIPO Y EQUIPO
data_maestro<-merge(x = data2, y = df2, by.x = "Dsc Producto", all.x = FALSE)
# TRAER DATA LOCALIDADES CASTILLO
localidadescastillo <- read_xlsx("localidadescastillo.xlsx")
localidadescastillo<-localidadescastillo %>% select(Dist,ZONA)
localidadescastillo$Dist<-trimws(localidadescastillo$Dist,"b")
localidadescastillo$ZONA<-trimws(localidadescastillo$ZONA,"b")
data_maestro$Dist<-trimws(data_maestro$Dist,"b")
# convitiendo distritos a minusculas y escogiendo los distintos
localidadescastillo<-localidadescastillo %>%
distinct(tolower( Dist), .keep_all = TRUE) %>% select(ZONA,`tolower(Dist)`)
colnames(localidadescastillo)<-c("ZONA","Dist")
data_maestro$Dist<-tolower(data_maestro$Dist)
# VALIDANDO ZONAS NUEVAS
# PROBLEMA HALLADO: Las localides nuevas castillo son demasiadas porque al momento de hacer buscarV no esta encontrado casi nada
# ya que R no toma como igual una mayuscula y una minuscula  a diferencia de EXCEL.
# por lo tanto se debe poner a minuscula/mayuscula al menos para el cruce
# data_maestro$Dist[853]="villasalvajeje"
localidadesnuevascastillo<-data_maestro[!toupper(data_maestro$Dist) %in% toupper(localidadescastillo$Dist),]
write_xlsx(localidadesnuevascastillo,"localidadesnuevascastillo.xlsx")
# AQUI MANUALMENTE SE DEBE PREGUNTAR AL SEÑOR RICARDO A QUE ZONAS PERTENECEN ESAS NUEVAS LOCALIDADES, UNA VEZ AGREGADAS
# EN EL EXCEL DE LOCALIDADES DIMEXA YA SE DEBE REGRESAR A R Y CORRE                                                     R ESTA VEZ EL PROGRAMA COMPLETO
data_maestro_localidades<-merge(x = data_maestro, y=localidadescastillo, by.x = "Dist", all.x = TRUE)
data_maestro_localidades<-data_maestro_localidades %>%
select(FUENTE,periodo,Factura,Fecha,RUC,ELIMINAR,RazComercial,TIPO,`Dsc Producto`,artdesvalid,cantidad,
Total,DSCVEND,ZONA,Vendedor,tipo,equipo,ppuni,ppsol,flag,Dept,Dist,Prov)
# ERROR COMÚN: no deberia dar mas registros en data maestro localidades que en data maestro, deberían ser la misma
# cantidad de observaciones, esto ocurre porque en el archivo fuente hay filas repetidas lo cual esta mal y hace que el programa
# de errores, revisar esto en el archivo de localidades por lo general esto ocurre ahi porque hay repetidos
# x<-data_maestro[!data_maestro$COMBINACION %in% data_maestro_localidades$COMBINACION,]
# chequear que siempre data_maestro sea igual a data_maestro_localidades porque sino
write_xlsx(data_maestro_localidades,"castillo.xlsx")
# limpiando nuestra ventana
rm(list=ls())
#---------------------------------------------------------------------------------------------------------#
#---------------------------------------------------------------------------------------------------------#
# ---- DESCARGA DE DATA - DESCARGA DE DATA - DESCARGA DE DATA - DESCARGA DE DATA - DESCARGA DE DATA ----- #
#---------------------------------------------------------------------------------------------------------#
#---------------------------------------------------------------------------------------------------------#
# install.packages("RSelenium")
library(RSelenium)
library(rvest)
library(tidyverse)
library(lubridate)
# #rvest parsea el html y lo pone en un formato manejable
# #tidyverse sirve para hacer todo el manejo de datos
# #rselenium es un sistema de java que sirve para testear o simular software
#
# #estamos haciendo la conexion mediante firefox
# driver <- rsDriver(browser = c("firefox"),port = 4446L)
# remote_driver <- driver[["client"]]
#
# remote_driver$open()
# Sys.sleep(2)
# # url de la pagina del login
# remote_driver$navigate("http://179.43.97.82:8081/distribuidora/login.zul;jsessionid=3633CFA707580B3ED1A0B8A783EAE344")
# Sys.sleep(2)
# #enviar usuario
# # rm(username,passwd,idlogin,idpasswd,key,id71lansier,iddescargadetalle,idgenpaquetes,idlinea,idmesdic,idmesnov,idpaquetes,idperiodo,key2)
#
# username <- remote_driver$findElement(using = "class",value = "z-textbox")
# username$clearElement()
# username$sendKeysToElement(list("ksarmiento"))
#
#
# #obteniendo id de el password
# #con esto ya se que mi id es este, y como ya se que para el password solo cambia la letra final y el numero de caracteres no cambias
# #entonces puedo modificarlo y listo, tengo el id para mi otra busqueda
# key<-username$getElementAttribute("id")
# key<-substr(key,1,4)
# idpasswd<-paste0(key,"i")
# idlogin<-paste0(key,"l")
#
# #enviar contraseÃ±a
# passwd <- remote_driver$findElement(using = "id",value = idpasswd)
# passwd$clearElement()
# passwd$sendKeysToElement(list("3217"))
# Sys.sleep(2)
#
# #click en login para entrar
# login <- remote_driver$findElement(using = "id",value = idlogin)
# login$clickElement()
# # hasta aqui ya logre ingresar a la pagina logeandome, ahora a extraer la data necesaria
#
# #click en compras
# compras <- remote_driver$findElement(using = "class",value = "z-button")
# compras$clickElement()
# key2<-compras$getElementAttribute("id")
# key2<-substr(key2,1,4)
# idpaquetes<-paste0(key2,"50-cnt")
# idgenpaquetes<-paste0(key2,"60-a")
# idlinea<-paste0(key2,"k0-btn")
# id71lansier<-paste0(key2,"92")
# idperiodo<-paste0(key2,"x0-btn")
# idmesnov<-paste0(key2,"n2")
# idmesdic<-paste0(key2,"a2")
# iddescargadetalle<-paste0(key2,"h1")
# #click en paquetes
# paquetes <- remote_driver$findElement(using = "id",value = idpaquetes)
# paquetes$clickElement()
#
# #click en generar paquetes
# generarpaquetes <- remote_driver$findElement(using = "id",value = idgenpaquetes)
# generarpaquetes$clickElement()
#
# #click en linea
# linea <- remote_driver$findElement(using = "id",value = idlinea)
# linea$clickElement()
#
# #click en 71-LANSIER
# LANSIER <- remote_driver$findElement(using = "id",value = id71lansier)
# LANSIER$clickElement()
#
# #click en el periodo
# periodo <- remote_driver$findElement(using = "id",value = idperiodo)
# periodo$clickElement()
#
# #click en el mes deseado
# # solo esta configurado para noviembre y diciembre ojo, para el proximo aÃ±o se debe configurar de nuevo
# clickmes <- remote_driver$findElement(using = "id",
#                                       value = ifelse(month(today())==11,
#                                                      idmesnov,
#                                                      idmesdic))
#
# clickmes$clickElement()
#
# #click en descargar detalle
# descargadetalle <- remote_driver$findElement(using = "id",value = iddescargadetalle)
# descargadetalle$clickElement()
# una vez descargada la data, ahora toca formatear todo
#--------------------------------------------------------------------------------------------------------#
#--------------------------------------------------------------------------------------------------------#
# --- FORMATEO DE DATA - FORMATEO DE DATA - FORMATEO DE DATA - FORMATEO DE DATA - FORMATEO DE DATA ----- #
#--------------------------------------------------------------------------------------------------------#
#--------------------------------------------------------------------------------------------------------#
library(dplyr)
library(readxl)
library(lubridate)
library(writexl)
data<-read_xlsx(path = paste0("C:\\Users\\LBarrios\\Downloads\\LANSIER-",
year(today()),
"-",
ifelse(month(today())==12,"DICIEMBRE",
ifelse(month(today())==1,"ENERO",
ifelse(month(today())==2,"FEBRERO",
ifelse(month(today())==3,"MARZO",
ifelse(month(today())==4,"ABRIL",
ifelse(month(today())==5,"MAYO",
ifelse(month(today())==6,"JUNIO",
ifelse(month(today())==7,"JULIO",
ifelse(month(today())==8,"AGOSTO",
ifelse(month(today())==9,"SETIEMBRE",
ifelse(month(today())==10,"OCTUBRE","NOVIEMBRE"))))))))))),
".xlsx" ))
#----------- cierre de mes -----------------#
# data<-read_xlsx(path ="C:\\Users\\LBarrios\\Downloads\\LANSIER-2022-MARZO.xlsx" )
# names(data)
# creando columna fuente que diga M&M
data<-data %>% mutate(FUENTE="M&M")
# creando columna periodo con el primer dia del mes a actualizar
data<-data %>% mutate(periodo=paste0("01/",
ifelse(month(today())<10,paste0("0",month(today())),month(today())),
"/",
year(today())))
# insertando columna ELIMINAR en vacio
data<-data %>% mutate(ELIMINAR="")
# creando columna DSCZONA
data<-data %>% mutate(DSCZONA="")
# creando ppuni ppsol flag dpto dist prov que estaran vacias
data<-data %>% mutate(ppuni="") %>%
mutate(ppsol="") %>% mutate(flag="") %>% mutate(dpto="") %>% mutate(dist="") %>% mutate(prov="")
# DATA2 TIENE EL FORMATO QUE SE CARGARIA AL SQL
data2<-data %>%
select(FUENTE,
periodo,NUMERO,
FECHA,RUC,ELIMINAR,
`NOMBRE CLIENTE`,DOCUMENTO,DESCRIPCION,CANTIDAD,
SUBTOT,DSCZONA,VENDEDOR,ppuni,ppsol,flag,DEPARTAMENTO,LOCALIDAD,PROVINCIA)
# ---------------------------------------------------------------------------------------------- #
#----------------- trayendo data externa para validar y/o cruzar mi data ------------------------#
# ---------------------------------------------------------------------------------------------- #
# trayendo el excel con todas las localidades para mym con lo cual se cruzarÃ¡ todo
# con esto leo el maestro lansier con el cual cruzare mi data
maestrolansier <- read_xlsx("maestrolansier.xlsx")
localidadesmym <- read_xlsx("localidadesmym.xlsx")
localidadesmym<-localidadesmym %>% select(LOCALIDAD,ZONA)
# PRIMERO CRUZAMOS CONTRA EL MAESTRO LANSIER
# aqui selecciono lo que voy a cruzar
# df1<-data2 %>% select(Articulo)
df2<-maestrolansier %>% select(`M&M`,`artdsc VALID`,TIPO,equipo)
# cambio el nombre a df2 para que coincida el nombre de la columna articulo para poder hacer el merge
colnames(df2)<-c("DESCRIPCION","artdesvalid","tipo","equipo")
# con esto quito los espacios adelante y detrÃ¡s del artdesvalid Y LOS ARTICULOS
data2$DESCRIPCION<-trimws(data2$DESCRIPCION,"b")
df2$DESCRIPCION<-trimws(df2$DESCRIPCION,"b")
df2$artdesvalid<-trimws(df2$artdesvalid,"b")
# validando productos
productosnuevosmym<-data2[!data2$DESCRIPCION %in% df2$DESCRIPCION,]
write_xlsx(productosnuevosmym,"productosnuevosmym.xlsx")
# ----------------------------------------------------- #
# ---CRUCE DE INFORMACIoN PARA OBTENER LOS VALIDADOS--- #
# ----------------------------------------------------- #
# cruzando para obtener los validados, tipo y equipo
ArtdesValid2<-merge(x = data2, y = df2, by.x = "DESCRIPCION", all.x = TRUE)
# validando que esten las mismas localidades
localidadesnuevasmym<-ArtdesValid2[!ArtdesValid2$LOCALIDAD %in% localidadesmym$LOCALIDAD,]
write_xlsx(localidadesnuevasmym,"localidadesnuevasmym.xlsx")
#
# CRUZANDO PARA OBTENER LA LOCALIDAD
ArtdesValid3<-merge(x = ArtdesValid2, y=localidadesmym, by.x = "LOCALIDAD", all.x = TRUE)
ArtdesValid3<-ArtdesValid3 %>%
select(FUENTE,periodo,NUMERO,FECHA,RUC,ELIMINAR,`NOMBRE CLIENTE`,DOCUMENTO,DESCRIPCION,artdesvalid,CANTIDAD,
SUBTOT,DSCZONA,ZONA,VENDEDOR,tipo,equipo,ppuni,ppsol,flag,DEPARTAMENTO,LOCALIDAD,PROVINCIA)
write_xlsx(ArtdesValid3,"mym.xlsx")
# en esta ocasion todo ha cruzado asi que esta bien
# este codigo de abajo es para ver si todas las localidades son las mismas
# a<-subset(data, !(LOCALIDAD %in% localidadesmym$LOCALIDAD))
rm(list = ls())
# dado que los nombres de las carpetas que genera b2binretail son totalmente aleatorios y no les puedo
# encontrar un patrón, debe hacerse manual el cambio de nombres para que cualquiera pueda correr
# este script, por lo tanto una vez descargada la data de b2binretail, manualmente debe descomprimirse
# y al excel que nos da ponerle de nombre b2binretail
library(readxl)
library(dplyr)
library(lubridate)
library(readr)
library(RODBC)
dado que los nombres de las carpetas que genera b2binretail son totalmente aleatorios y no les puedo
# encontrar un patrón, debe hacerse manual el cambio de nombres para que cualquiera pueda correr
# este script, por lo tanto una vez descargada la data de b2binretail, manualmente debe descomprimirse
# y al excel que nos da ponerle de nombre b2binretail
library(readxl)
library(dplyr)
library(lubridate)
library(readr)
library(RODBC)
#--------------------
# ------------ con trimws puedo quitar los espacios iniciales y finales de un texto --------- #
# x<- "  texto con espacios "
# trimws(x,"b")
#--------------------
data<-read.csv(file = "C:/Users/LBarrios/Downloads/b2binretail.csv")
#-------------------------------------------- para cierre de mes --------------------------------------------#
# data<-data %>% mutate(fecha_update=(as.Date(paste0(ifelse(day(today())<10,paste0("0",day(today())),day(today())),
#                                                    "/",
#                                                    month(today()),
#                                                    "/",
#                                                    year(today())),"%d/%m/%Y")))
#
# data<-data %>% mutate(periodo=as.Date( paste0("01","/",month(today())-1,"/",year(today())),"%d/%m/%Y"))
#-------------------------------------------- para un dia normal --------------------------------------------#
data<-data %>% mutate(fecha_update=(as.Date(paste0(ifelse(day(today())-1<10,paste0("0",day(today())-1),day(today())-1),
"/",
month(today()),
"/",
year(today())),"%d/%m/%Y")))
data<-data %>% mutate(periodo=as.Date( paste0("01","/",month(today()),"/",year(today())),"%d/%m/%Y"))   #esta fecha esta para el mes actual, si se desea algun mes en especial se debe cambiar
# -------------formato stock-----------
# fecha_update
# COD_LOCAL
# DESCRIPCION
# INVENTARIO.u.
# INVENTARIO.S.
# -----------formato ventas-----------
# periodo
# fecha_update
# DESCRIPCION
# COD_LOCAL
# VTA_PERIODO_UNID
# VALOR_VTA_PUB_PERIODO_S
stock<-data %>% select(fecha_update,COD_LOCAL,DESCRIPCION,INVENTARIO.u.,INVENTARIO.S.)
# write_tsv(stock, file = "stockb2b.txt", na = " ")
venta<-data %>% select(periodo,fecha_update,DESCRIPCION,COD_LOCAL,VTA_PERIODO_UNID,VALOR_VTA_PUB_PERIODO_S)
# write_tsv(venta, file = "ventab2b.txt",na = " ")
# rm(list=ls())
#---------------------------------------------------------------------#
#                subiendo la data directamente al SQL                 #
#---------------------------------------------------------------------#
# para esta ocasion se creó una conexión ODBC or somethin like that para poder conectarnos a la
# base de datos de Inretail, porque SQLuis era para la base de datos BI_Comercial
# si logro realizar este paso ya no deberia generar los txt de stock y venta :D
sqlb2b<-odbcConnect("SQLb2b",uid = "sa",pwd = "Comercial.2020")
# BORRANDO EL STOCKB2B Y EL MES ACTUAL DE VENTASB2B EN EL SQL
# para stock
sqlQuery(sqlb2b,"delete from StockInretail")
# para venta
# cuando es cierre de mes usar este codigo
# sqlQuery(sqlb2b, paste0("delete from VentaInretail where periodo='01/",
#                         ifelse(month(today())<10,paste0(0,month(today())-1),month(today())-1) ,
#                         "/",year(today()),"'"))
# para dia normal usar este codigo
sqlQuery(sqlb2b, paste0("delete from VentaInretail where periodo='01/",
ifelse(month(today())<10,paste0(0,month(today())),month(today())) ,
"/",year(today()),"'"))
# SUBIENDO EL STOCK AL SQL
sqlSave(sqlb2b,stock,tablename = "StockInretail",rownames = FALSE,append = TRUE,fast = FALSE)
# SUBIENDO LA VENTA AL SQL
sqlSave(sqlb2b,venta,tablename = "VentaInretail",rownames = FALSE,append = TRUE,fast = FALSE)
# hasta aqui se supone que ya todo esta concretado, el programa ya leyo el archivo descargado del b2b
# le dio el formato de venta y stock que va en el sql, borró toda la data de stockinretail porque eso no
# nos importa, borro la data del mes actual de ventainretail para que no se duplique, y subio la data
# trabajada de stock y venta al sql, con ello solo faltaria ingresar al powerbi y darle actualizar.
# OJO:  si pongo fast equal true deberia cargar mas rapido la data pero no me permite porque
# hay algun problema con los formatos de data o algo asi, si se puede mejorar a futuro seria genial, ya
# que podria cargar toda la data de un solo porraso, sino igual la subida tarda algo de 7 minutos aprox.
rm(list=ls())
# paquetes utilizados
library(RODBC)
library(dplyr)
library(lubridate)
library(writexl)
library(readxl)
# conexion al sql
sqlcomercial<-odbcConnect("SQLansier",uid = "lv",pwd = "lv.2014c")
# trayendo la data de los dos ultimos años de lansier
lansier<-sqlQuery(sqlcomercial,"[dbo].[STARSOFT_LISTA_VENTAS]")
# str(lansier)
# summary(lansier)
# unique(lansier$Periodo)
# unique(lansier$TipoCl)
# unique(lansier$artdes)
# unique(lansier$clienom)
# unique(lansier$DscZona)
# unique(lansier$dscven)
# unique(lansier$ColorEqui)
# unique(lansier$Fecha)
#------------------- PARA UN DIA NORMAL ---------------#
# nos quedamos solo con el periodo actual
lansier<-lansier %>% filter(Periodo==max(lansier$Periodo))
# -------------- PARA CIERRE DE MES -------------------#
# para cerrar el periodo del mes anterior hacer el siguiente código, escogemos el [2], porque ese será el periodo anterior al actual
# lansier<-lansier %>% filter(Periodo== unique(lansier$Periodo)[2])
# quitamos espacios delante y detras al artdes
lansier$artdes<-trimws(lansier$artdes,which = "both")
# quitamos los dobles espacios que hay entre palabras
lansier$artdes<-gsub("\\s+"," ",lansier$artdes)
# quitamos los simbolos feos producidos por las tildes y las convertimos a tildes nuevamente
lansier$artdes<-iconv(lansier$artdes,from = "UTF-8",to = "latin1")
lansier$clienom<-iconv(lansier$clienom,from = "UTF-8",to = "latin1")
lansier$dscven<-iconv(lansier$dscven,from = "UTF-8",to = "latin1")
# cambiamos el formato de la fecha para que no aparezcan las horas
lansier$Fecha<-paste0(ifelse(day(lansier$Fecha)<10,paste0(0,day(lansier$Fecha)),day(lansier$Fecha)),
"/",
ifelse(month(lansier$Fecha)<10,paste0(0,month(lansier$Fecha)),month(lansier$Fecha))  ,
"/",
year(lansier$Fecha))
#----------------- PAUL VENTAS CARPETA COMPARTIDA ----------------#
# eliminamos del tipocl aquellas que son vacías
paulventas<-lansier %>% filter(TipoCl!=" ")
write_xlsx(paulventas,"paulventas.xlsx")
#------------------------ DASHBOARD-LANSIER ----------------------#
# para el dashboard solo nos interesa el canal privado
lansier<-lansier %>% filter(TipoCl=="DISTRIBUIDORES")
# eliminar productos covid "NOXAL 6 MG/ML X 10ML SOLUCIÃ“N ORAL GOTAS"
lansier<-lansier %>% filter(artdes!="NOXAL 6 MG/ML X 10ML SOLUCIÓN ORAL GOTAS")
# cruzando data
lansier<-lansier %>% mutate(FUENTE="LANSIER")
# CREANDO PERIODO PARA ESTE MES
lansier<-lansier %>% mutate(periodo=paste0("01/",
ifelse(month(today())<10,paste0("0",month(today())),month(today())),
"/",
year(today())))
# CREANDO PERIODO PARA MES ANTERIOR
# lansier<-lansier %>% mutate(periodo=paste0("01/",
#                                            ifelse(month(today())<10,paste0("0",month(today())-1),month(today())-1),
#                                            "/",
#                                            year(today())))
# insertando columna ELIMINAR en vacio
lansier<-lansier %>% mutate(ELIMINAR="")
# creando columna DSCZONA
lansier<-lansier %>% mutate(DSCVEND="")
# creando ppuni ppsol flag dpto dist prov que estaran vacias
lansier<-lansier %>% mutate(ppuni="") %>% mutate(ppsol="") %>% mutate(flag="")
lansier<-lansier %>%
select(FUENTE,periodo,IdFactura,Fecha,codclie,ELIMINAR,
clienom,tipoCondi,artdes,
Cant,SubTotal,DscZona,dscven,ppuni,ppsol,flag)
# identificando donde marcar con E en ELIMINAR
castillo<-which(lansier$clienom== "REPRESENTACIONES CASTILLO S. A.", arr.ind=TRUE)
mym<-which(lansier$clienom== "M & M  PROD. MED. Y FARMACEUTICOS  E.I.R.L", arr.ind=TRUE)
difarlib<-which(lansier$clienom== "DISTRIB. FARMACEUTICA LA LIBERTAD S.R.L.", arr.ind=TRUE)
# marcando con E
lansier$ELIMINAR[castillo]="E"
lansier$ELIMINAR[mym]="E"
lansier$ELIMINAR[difarlib]="E"
# LEYENDO DATA NECESARIA PARA VALIDAR
maestrolansier <- read_xlsx("maestrolansier.xlsx")
# selecciono solo lo que voy a querer de maestro lansier que para este caso seria DIMEXA artdesvalid tipo y equipo
df2<-maestrolansier %>% select(LANSIER,`artdsc VALID`,TIPO,equipo)
# cambio el nombre a df2 para que coincida el nombre de la columna articulo para poder hacer el merge
colnames(df2)<-c("artdes","artdesvalid","tipo","equipo")
# QUITO ESPACIOS DELANTE Y DETRAS DEL MAESTROLANSIER
df2$artdes<-trimws(df2$artdes,"b")
df2$artdesvalid<-trimws(df2$artdesvalid,"b")
# antes de cruzar debemos validar que esten los mismo productos y cuales no reconoce
productosnuevoslansier<-lansier[!lansier$artdes %in% df2$artdes,]
write_xlsx(productosnuevoslansier,"productosnuevoslansier.xlsx")
# son productos de lansier
# EN UN INICIO data_maestro daba un numero diferente de filas a lansier y esto era porque en el maestrolansier habian nombres que se repetian
# no pueden repetirse nombre o al cruzar duplicará esas observaciones
data_maestro<-merge(x = lansier, y = df2, by.x = "artdes", all.x = TRUE)
# ahora cruzando con vendedores
vendedoresdimexa<-read_xlsx("vendedoresdimexa.xlsx")
vendedoresdimexa<-vendedoresdimexa %>% select(ruc,flag)
colnames(vendedoresdimexa)<-c("codclie","DSCVEND")
# quitando los espacios en blanco delante y detras
data_maestro$codclie<-trimws(data_maestro$codclie,"b")
vendedoresdimexa$codclie<-trimws(vendedoresdimexa$codclie,"b")
# combinando y validando con la data de vendedoresdimexa para traer el dscvend o flag como esta en vendedoresdimexa
data_maestro_vendedores<-merge(data_maestro,vendedoresdimexa,by.x = "codclie",all.x = TRUE)
# dandole orden a nuestro excel
data_maestro_vendedores<-data_maestro_vendedores %>%
select(FUENTE,periodo,IdFactura,Fecha,codclie,ELIMINAR,
clienom,tipoCondi,artdes,artdesvalid,
Cant,SubTotal,DSCVEND,DscZona,dscven,tipo,equipo,ppuni,ppsol,flag)
# eliminamos las filas que tienen subtotal igual a cero
zerosubtotal<-which(data_maestro_vendedores$SubTotal== 0, arr.ind=TRUE)
data_maestro_vendedores<-data_maestro_vendedores[-zerosubtotal,]
write_xlsx(data_maestro_vendedores,"lansierdashboard.xlsx")
# limpiando nuestra ventana
rm(list=ls())
