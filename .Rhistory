# CRUZANDO PARA OBTENER LA LOCALIDAD
# 1. concatenamos departamento + distrito de nuestra data_maestro para generar la llave
data_maestro<-data_maestro %>% mutate(LLAVE=paste0(DEPARTAMENTO,DISTRITO))
# TRAEMOS LA DATA DE LOCALIDADESDIMEXA
localidadesdimexa <- read_xlsx("localidadesdimexa.xlsx")
localidadesdimexa<-localidadesdimexa %>% select(LLAVE,ZONA)
localidadesdimexa$LLAVE<-trimws(localidadesdimexa$LLAVE,"b")
localidadesdimexa$ZONA<-trimws(localidadesdimexa$ZONA,"b")
data_maestro$LLAVE<-trimws(data_maestro$LLAVE,"b")
# por alguna razon con allx=true da mas filas de las que existen, habra que verificar de donde agrega más
# mientras que con allx=false trae el mismo numero de filas que hay en data_maestro que al parecer
# deberia ser lo correcto, hay que revisar ello
# VALIDANDO QUE HAYA LAS MISMAS LOCALIDADES TANTO EN NUESTRO EXCEL DESCARGADO COMO EN EL MAESTRO DE LOCALIDADES,
# SI NO ESTAN DEBERÁN AGREGARSE PARA QUE PUEDAN CRUZARSE CORRECTAMENTE LUEGO.
localidadesnuevasdimexa<-data_maestro[!data_maestro$LLAVE %in% localidadesdimexa$LLAVE,]
write_xlsx(localidadesnuevasdimexa,"localidadesnuevasdimexa.xlsx")
#
# AQUI MANUALMENTE SE DEBE PREGUNTAR AL SEÑOR RICARDO A QUE ZONAS PERTENECEN ESAS NUEVAS LOCALIDADES, UNA VEZ AGREGADAS
# EN EL EXCEL DE LOCALIDADES DIMEXA YA SE DEBE REGRESAR A R Y CORRER ESTA VEZ EL PROGRAMA COMPLETO
data_maestro_localidades<-merge(x = data_maestro, y=localidadesdimexa, by.x = "LLAVE", all.x = TRUE)
# TRAEMOS LA DATA DE VENDEDORES PARA CRUZARLA MEDIANTE EL RUC
vendedoresdimexa<-read_xlsx("vendedoresdimexa.xlsx")
vendedoresdimexa<-vendedoresdimexa %>% select(ruc,flag)
colnames(vendedoresdimexa)<-c("RUC CLIENTE","DSCVEND")
#--------------------------------------------------------------------------------------------------------#
#--------------------------------------------------------------------------------------------------------#
# --- FORMATEO DE DATA - FORMATEO DE DATA - FORMATEO DE DATA - FORMATEO DE DATA - FORMATEO DE DATA ----- #
#--------------------------------------------------------------------------------------------------------#
#--------------------------------------------------------------------------------------------------------#
# son 4 los departamentos que se descarga la data en dimexa
detalle <- read_xlsx("C:\\Users\\LBarrios\\Downloads\\detalle.xlsx")
detalle1 <- read_xlsx("C:\\Users\\LBarrios\\Downloads\\detalle (1).xlsx")
detalle2 <- read_xlsx("C:\\Users\\LBarrios\\Downloads\\detalle (2).xlsx")
detalle3 <- read_xlsx("C:\\Users\\LBarrios\\Downloads\\detalle (3).xlsx")
# combinando los 4 departamentos descargados de dimexa
data<-rbind(detalle,detalle1,detalle2,detalle3)
rm(detalle,detalle1,detalle2,detalle3)
# cambiando el formato de la fecha
data$FECHA<-paste0(ifelse(day(data$FECHA)<10,paste0(0,day(data$FECHA)),day(data$FECHA)),
"/",
ifelse(month(data$FECHA)<10,paste0(0,month(data$FECHA)),month(data$FECHA))  ,"/",year(data$FECHA))
# creando columna fuente que diga METRONIC
data<-data %>% mutate(FUENTE="DIMEXA")
# creando columna periodo con el primer dia del mes a actualizar
data<-data %>% mutate(periodo=paste0("01/",
ifelse(month(today())<10,paste0("0",month(today())),month(today())),
"/",
year(today())))
# insertando columna ELIMINAR en vacio
data<-data %>% mutate(ELIMINAR="")
# creando columna DSCZONA
data<-data %>% mutate(DSCVEND="")
# creando ppuni ppsol flag dpto dist prov que estaran vacias
data<-data %>% mutate(ppuni="") %>% mutate(ppsol="") %>% mutate(flag="")
# seleccionando solo las columnas que nos interesan
# DATA2 TIENE EL FORMATO QUE SE CARGARIA AL SQL
# AQUI NO ESTOY PONIENDO ZONA NI DSCVEND NI TIPO NI EQUIPO
# NI ARTDESVALID PORQUE ESOS SERAN LOS QUE TRAERÉ CON EL MERGE
data2<-data %>%
select(FUENTE,periodo,`NUMERO FACTURA`,FECHA,`RUC CLIENTE`,ELIMINAR,
`NOMBRE CLIENTE`,`TIPO DOCUMENTO`,`NOMBRE PRODUCTO`,
CANTIDAD,`SUB TOTAL`,`NOMBRE VENDEDOR`,ppuni,ppsol,flag,DEPARTAMENTO,DISTRITO,PROVINCIA)
# marcar una E en eliminar cuando el nombre del vendedor sea BRUNY CHAVEZ SALAS o MERCEDES COTRINA VERGEL
# primero identificamos la posicion de las filas donde esta bruny y mercedes
BRUNYNROW<-which(data2$`NOMBRE VENDEDOR` == "BRUNY CHAVEZ SALAS", arr.ind=TRUE)
MERCEDESNROW<-which(data2$`NOMBRE VENDEDOR` == "MERCEDES COTRINA VERGEL", arr.ind=TRUE)
# ahora le decimos que para esas filas ponga una E en la columna Eliminar
data2$ELIMINAR[BRUNYNROW]="E"
data2$ELIMINAR[MERCEDESNROW]="E"
# data$ELIMINAR[BRUNYNROW]
# write_xlsx(data,"dimexa.xlsx")
# LEYENDO DATA NECESARIA PARA VALIDAR
maestrolansier <- read_xlsx("maestrolansier.xlsx")
# selecciono solo lo que voy a querer de maestro lansier que para este caso seria DIMEXA artdesvalid tipo y equipo
df2<-maestrolansier %>% select(DIMEXA,`artdsc VALID`,TIPO,equipo)
# cambio el nombre a df2 para que coincida el nombre de la columna articulo para poder hacer el merge
colnames(df2)<-c("NOMBRE PRODUCTO","artdesvalid","tipo","equipo")
# CON ESTO QUITO LOS ESPACIOS AL COMIENZO Y EL FINAL DE LOS ARTICULOS PORQUE NO PERMITIAN CRUZAR TODO
data2$`NOMBRE PRODUCTO`<-trimws(data2$`NOMBRE PRODUCTO`,"b")
df2$`NOMBRE PRODUCTO`<-trimws(df2$`NOMBRE PRODUCTO`,"b")
df2$artdesvalid<-trimws(df2$artdesvalid,"b")
# ----------------------------------------------------- #
# ---CRUCE DE INFORMACIÓN PARA OBTENER LOS VALIDADOS--- #
# ----------------------------------------------------- #
# cruzando para obtener los validados, tipo y equipo
# ArtdesValid2<-merge(x = data2, y = df2, by.x = "NOMBRE PRODUCTO", all.x = TRUE)
# utilizamos con all.x = false porque de ese modo no trae las toallitas humedas ni alcohol en gel, dado que no
# son productos de lansier
data_maestro<-merge(x = data2, y = df2, by.x = "NOMBRE PRODUCTO", all.x = FALSE)
# CRUZANDO PARA OBTENER LA LOCALIDAD
# 1. concatenamos departamento + distrito de nuestra data_maestro para generar la llave
data_maestro<-data_maestro %>% mutate(LLAVE=paste0(DEPARTAMENTO,DISTRITO))
# TRAEMOS LA DATA DE LOCALIDADESDIMEXA
localidadesdimexa <- read_xlsx("localidadesdimexa.xlsx")
localidadesdimexa<-localidadesdimexa %>% select(LLAVE,ZONA)
localidadesdimexa$LLAVE<-trimws(localidadesdimexa$LLAVE,"b")
localidadesdimexa$ZONA<-trimws(localidadesdimexa$ZONA,"b")
data_maestro$LLAVE<-trimws(data_maestro$LLAVE,"b")
# VALIDANDO QUE HAYA LAS MISMAS LOCALIDADES TANTO EN NUESTRO EXCEL DESCARGADO COMO EN EL MAESTRO DE LOCALIDADES,
# SI NO ESTAN DEBERÁN AGREGARSE PARA QUE PUEDAN CRUZARSE CORRECTAMENTE LUEGO.
localidadesnuevasdimexa<-data_maestro[!data_maestro$LLAVE %in% localidadesdimexa$LLAVE,]
write_xlsx(localidadesnuevasdimexa,"localidadesnuevasdimexa.xlsx")
data_maestro_localidades<-merge(x = data_maestro, y=localidadesdimexa, by.x = "LLAVE", all.x = TRUE)
# TRAEMOS LA DATA DE VENDEDORES PARA CRUZARLA MEDIANTE EL RUC
vendedoresdimexa<-read_xlsx("vendedoresdimexa.xlsx")
vendedoresdimexa<-vendedoresdimexa %>% select(ruc,flag)
colnames(vendedoresdimexa)<-c("RUC CLIENTE","DSCVEND")
# quitando los espacios en blanco delante y detrás
data_maestro<-trimws(data2$`NOMBRE PRODUCTO`,"b")
# quitando los espacios en blanco delante y detrás
data_maestro_localidades$`RUC CLIENTE`<-trimws(data_maestro_localidades$`RUC CLIENTE`,"b")
vendedoresdimexa$`RUC CLIENTE`<-trimws(vendedoresdimexa$`RUC CLIENTE`,"b")
vendedoresdimexa$`RUC CLIENTE`<-trimws(vendedoresdimexa$`RUC CLIENTE`,"b")
# combinando y validando con la data de vendedoresdimexa para traer el dscvend o flag como está en vendedoresdimexa
dimexa<-merge(data_maestro_localidades,vendedoresdimexa,by.x = "RUC CLIENTE",all.x = TRUE)
# dandole orden a nuestro excel
dimexa<-dimexa %>%
select(FUENTE,periodo,`NUMERO FACTURA`,FECHA,`RUC CLIENTE`,ELIMINAR,
`NOMBRE CLIENTE`,`TIPO DOCUMENTO`,`NOMBRE PRODUCTO`,artdesvalid,
CANTIDAD,`SUB TOTAL`,DSCVEND,ZONA,`NOMBRE VENDEDOR`,tipo,equipo,ppuni,ppsol,flag,DEPARTAMENTO,DISTRITO,PROVINCIA)
# PARA RUC 20514304921 HACIENDO LOS CAMBIOS DEPENDIENDO DE LA ZONA A QUE DSCVEND PERTENECE
nrowintifarma<-which(dimexa$`RUC CLIENTE` == "20514304921", arr.ind=TRUE)
zonaintifarma<-dimexa$ZONA[nrowintifarma]
ifelse(zonaintifarma=="LIMA CALLAO",dimexa$DSCVEND[nrowintifarma]<-"AB",
ifelse(zonaintifarma=="LIMA OESTE",dimexa$DSCVEND[nrowintifarma]<-"KM",
ifelse(zonaintifarma=="LIMA ESTE",dimexa$DSCVEND[nrowintifarma]<-"KM",
ifelse(zonaintifarma=="LIMA NORTE",dimexa$DSCVEND[nrowintifarma]<-"JA",
ifelse(zonaintifarma=="LIMA SUR",dimexa$DSCVEND[nrowintifarma]<-"JA",
)))))
# PARA EL OTRO RUC 20543001075
nrowotroruc<-which(dimexa$`RUC CLIENTE`=="20543001075",arr.ind = TRUE)
zonanrowotroruc<-dimexa$ZONA[nrowotroruc]
ifelse(zonanrowotroruc=="LIMA CALLAO",dimexa$DSCVEND[nrowotroruc]<-"AB",
ifelse(zonanrowotroruc=="LIMA OESTE",dimexa$DSCVEND[nrowotroruc]<-"KM",
ifelse(zonanrowotroruc=="LIMA ESTE",dimexa$DSCVEND[nrowotroruc]<-"KM",
ifelse(zonanrowotroruc=="LIMA NORTE",dimexa$DSCVEND[nrowotroruc]<-"JA",
ifelse(zonanrowotroruc=="LIMA SUR",dimexa$DSCVEND[nrowotroruc]<-"JA",
)))))
# probando...
# encontré que la solución es la asignación mediante "<-", caso contrario me da una verificacion de verdad o falsedad
dimexa$DSCVEND[nrowintifarma]
dimexa$ZONA[nrowintifarma]
# ahora le decimos que para esas filas ponga una E en la columna Eliminar
data2$ELIMINAR[BRUNYNROW]="E"
data2$ELIMINAR[MERCEDESNROW]="E"
dimexa$ZONA[nrowintifarma]="LIMA OESTE"
# generando el xlsx con la data para subir al visor o sql
write_xlsx(dimexa,"dimexa.xlsx")
# limpiando nuestra ventana
rm(list=ls())
library(RODBC)
#subiendo directamente al sql
#conectando a ventalansier
sqlb2b<-odbcConnect("SQLuis",uid = "sa",pwd = "Comercial.2020")
month(today())
paste0("delete from VentaInretail where periodo='01/",
ifelse(month(data$FECHA)<10,paste0(0,month(data$FECHA)),month(data$FECHA)),
"/",year(today()),"'")
ifelse(month(data$FECHA)<10,paste0(0,month(data$FECHA)),month(data$FECHA))
ifelse(month(today())<10,paste0(0,month(today())),month(today()))
paste0("delete from VentaInretail where periodo='01/",
ifelse(month(today())<10,paste0(0,month(today())),month(today())) ,
"/",year(today()),"'")
paste0("delete from Venta_Lansier where periodo='01/",
ifelse(month(today())<10,paste0(0,month(today())),month(today())),
"/",year(today()))
#subiendo directamente al sql
#conectando a ventalansier
sqluis<-odbcConnect("SQLuis",uid = "sa",pwd = "Comercial.2020")
sqlQuery(sqluis,paste0("delete from Venta_Lansier where periodo='01/",
ifelse(month(today())<10,paste0(0,month(today())),month(today())),
"/",year(today())) )
sqlQuery(sqluis,paste0("delete from Venta_Lansier where periodo='01/",
ifelse(month(today())<10,paste0(0,month(today())),month(today())),
"/",year(today()),"'") )
# son 4 los departamentos que se descarga la data en dimexa
detalle <- read_xlsx("C:\\Users\\LBarrios\\Downloads\\detalle.xlsx")
detalle1 <- read_xlsx("C:\\Users\\LBarrios\\Downloads\\detalle (1).xlsx")
detalle2 <- read_xlsx("C:\\Users\\LBarrios\\Downloads\\detalle (2).xlsx")
detalle3 <- read_xlsx("C:\\Users\\LBarrios\\Downloads\\detalle (3).xlsx")
# combinando los 4 departamentos descargados de dimexa
data<-rbind(detalle,detalle1,detalle2,detalle3)
rm(detalle,detalle1,detalle2,detalle3)
# cambiando el formato de la fecha
data$FECHA<-paste0(ifelse(day(data$FECHA)<10,paste0(0,day(data$FECHA)),day(data$FECHA)),
"/",
ifelse(month(data$FECHA)<10,paste0(0,month(data$FECHA)),month(data$FECHA))  ,
"/",
year(data$FECHA))
# creando columna fuente que diga METRONIC
data<-data %>% mutate(FUENTE="DIMEXA")
# creando columna periodo con el primer dia del mes a actualizar
data<-data %>% mutate(periodo=paste0("01/",
ifelse(month(today())<10,paste0("0",month(today())),month(today())),
"/",
year(today())))
# insertando columna ELIMINAR en vacio
data<-data %>% mutate(ELIMINAR="")
# creando columna DSCZONA
data<-data %>% mutate(DSCVEND="")
# creando ppuni ppsol flag dpto dist prov que estaran vacias
data<-data %>% mutate(ppuni="") %>% mutate(ppsol="") %>% mutate(flag="")
# seleccionando solo las columnas que nos interesan
# DATA2 TIENE EL FORMATO QUE SE CARGARIA AL SQL
# AQUI NO ESTOY PONIENDO ZONA NI DSCVEND NI TIPO NI EQUIPO
# NI ARTDESVALID PORQUE ESOS SERAN LOS QUE TRAERÉ CON EL MERGE
data2<-data %>%
select(FUENTE,periodo,`NUMERO FACTURA`,FECHA,`RUC CLIENTE`,ELIMINAR,
`NOMBRE CLIENTE`,`TIPO DOCUMENTO`,`NOMBRE PRODUCTO`,
CANTIDAD,`SUB TOTAL`,`NOMBRE VENDEDOR`,ppuni,ppsol,flag,DEPARTAMENTO,DISTRITO,PROVINCIA)
# marcar una E en eliminar cuando el nombre del vendedor sea BRUNY CHAVEZ SALAS o MERCEDES COTRINA VERGEL
# primero identificamos la posicion de las filas donde esta bruny y mercedes
BRUNYNROW<-which(data2$`NOMBRE VENDEDOR` == "BRUNY CHAVEZ SALAS", arr.ind=TRUE)
MERCEDESNROW<-which(data2$`NOMBRE VENDEDOR` == "MERCEDES COTRINA VERGEL", arr.ind=TRUE)
# ahora le decimos que para esas filas ponga una E en la columna Eliminar
data2$ELIMINAR[BRUNYNROW]="E"
data2$ELIMINAR[MERCEDESNROW]="E"
# data$ELIMINAR[BRUNYNROW]
# write_xlsx(data,"dimexa.xlsx")
# LEYENDO DATA NECESARIA PARA VALIDAR
maestrolansier <- read_xlsx("maestrolansier.xlsx")
# selecciono solo lo que voy a querer de maestro lansier que para este caso seria DIMEXA artdesvalid tipo y equipo
df2<-maestrolansier %>% select(DIMEXA,`artdsc VALID`,TIPO,equipo)
# cambio el nombre a df2 para que coincida el nombre de la columna articulo para poder hacer el merge
colnames(df2)<-c("NOMBRE PRODUCTO","artdesvalid","tipo","equipo")
# CON ESTO QUITO LOS ESPACIOS AL COMIENZO Y EL FINAL DE LOS ARTICULOS PORQUE NO PERMITIAN CRUZAR TODO
data2$`NOMBRE PRODUCTO`<-trimws(data2$`NOMBRE PRODUCTO`,"b")
df2$`NOMBRE PRODUCTO`<-trimws(df2$`NOMBRE PRODUCTO`,"b")
df2$artdesvalid<-trimws(df2$artdesvalid,"b")
# EL SIGUIENTE PASO ES OPCIONAL, PORQUE IGUAL EN EL MERGE SIGUIENTE NO SE TOMARÁ EN CUENTA LOS PRODUCTOS QUE NO SE CRUCEN
# antes de cruzar debemos validar que esten los mismo productos y cuales no reconoce
# productosnuevos<-data2[!data2$`NOMBRE PRODUCTO` %in% df2$`NOMBRE PRODUCTO`,]
# lo hallado vendría a ser lo que esta en nuestra data descargada y no esta en los productos de nuestro maestro
# ----------------------------------------------------- #
# ---CRUCE DE INFORMACIÓN PARA OBTENER LOS VALIDADOS--- #
# ----------------------------------------------------- #
# cruzando para obtener los validados, tipo y equipo
# ArtdesValid2<-merge(x = data2, y = df2, by.x = "NOMBRE PRODUCTO", all.x = TRUE)
# utilizamos con all.x = false porque de ese modo no trae las toallitas humedas ni alcohol en gel, dado que no
# son productos de lansier
data_maestro<-merge(x = data2, y = df2, by.x = "NOMBRE PRODUCTO", all.x = FALSE)
# CRUZANDO PARA OBTENER LA LOCALIDAD
# 1. concatenamos departamento + distrito de nuestra data_maestro para generar la llave
data_maestro<-data_maestro %>% mutate(LLAVE=paste0(DEPARTAMENTO,DISTRITO))
# TRAEMOS LA DATA DE LOCALIDADESDIMEXA
localidadesdimexa <- read_xlsx("localidadesdimexa.xlsx")
localidadesdimexa<-localidadesdimexa %>% select(LLAVE,ZONA)
localidadesdimexa$LLAVE<-trimws(localidadesdimexa$LLAVE,"b")
localidadesdimexa$ZONA<-trimws(localidadesdimexa$ZONA,"b")
data_maestro$LLAVE<-trimws(data_maestro$LLAVE,"b")
# por alguna razon con allx=true da mas filas de las que existen, habra que verificar de donde agrega más
# mientras que con allx=false trae el mismo numero de filas que hay en data_maestro que al parecer
# deberia ser lo correcto, hay que revisar ello
# VALIDANDO QUE HAYA LAS MISMAS LOCALIDADES TANTO EN NUESTRO EXCEL DESCARGADO COMO EN EL MAESTRO DE LOCALIDADES,
# SI NO ESTAN DEBERÁN AGREGARSE PARA QUE PUEDAN CRUZARSE CORRECTAMENTE LUEGO.
localidadesnuevasdimexa<-data_maestro[!data_maestro$LLAVE %in% localidadesdimexa$LLAVE,]
write_xlsx(localidadesnuevasdimexa,"localidadesnuevasdimexa.xlsx")
#
# AQUI MANUALMENTE SE DEBE PREGUNTAR AL SEÑOR RICARDO A QUE ZONAS PERTENECEN ESAS NUEVAS LOCALIDADES, UNA VEZ AGREGADAS
# EN EL EXCEL DE LOCALIDADES DIMEXA YA SE DEBE REGRESAR A R Y CORRER ESTA VEZ EL PROGRAMA COMPLETO
data_maestro_localidades<-merge(x = data_maestro, y=localidadesdimexa, by.x = "LLAVE", all.x = TRUE)
# TRAEMOS LA DATA DE VENDEDORES PARA CRUZARLA MEDIANTE EL RUC
vendedoresdimexa<-read_xlsx("vendedoresdimexa.xlsx")
vendedoresdimexa<-vendedoresdimexa %>% select(ruc,flag)
colnames(vendedoresdimexa)<-c("RUC CLIENTE","DSCVEND")
# quitando los espacios en blanco delante y detrás
data_maestro_localidades$`RUC CLIENTE`<-trimws(data_maestro_localidades$`RUC CLIENTE`,"b")
vendedoresdimexa$`RUC CLIENTE`<-trimws(vendedoresdimexa$`RUC CLIENTE`,"b")
# combinando y validando con la data de vendedoresdimexa para traer el dscvend o flag como está en vendedoresdimexa
dimexa<-merge(data_maestro_localidades,vendedoresdimexa,by.x = "RUC CLIENTE",all.x = TRUE)
# dandole orden a nuestro excel
dimexa<-dimexa %>%
select(FUENTE,periodo,`NUMERO FACTURA`,FECHA,`RUC CLIENTE`,ELIMINAR,
`NOMBRE CLIENTE`,`TIPO DOCUMENTO`,`NOMBRE PRODUCTO`,artdesvalid,
CANTIDAD,`SUB TOTAL`,DSCVEND,ZONA,`NOMBRE VENDEDOR`,tipo,equipo,ppuni,ppsol,flag,DEPARTAMENTO,DISTRITO,PROVINCIA)
# PARA RUC 20514304921 HACIENDO LOS CAMBIOS DEPENDIENDO DE LA ZONA A QUE DSCVEND PERTENECE
nrowintifarma<-which(dimexa$`RUC CLIENTE` == "20514304921", arr.ind=TRUE)
zonaintifarma<-dimexa$ZONA[nrowintifarma]
ifelse(zonaintifarma=="LIMA CALLAO",dimexa$DSCVEND[nrowintifarma]<-"AB",
ifelse(zonaintifarma=="LIMA OESTE",dimexa$DSCVEND[nrowintifarma]<-"KM",
ifelse(zonaintifarma=="LIMA ESTE",dimexa$DSCVEND[nrowintifarma]<-"KM",
ifelse(zonaintifarma=="LIMA NORTE",dimexa$DSCVEND[nrowintifarma]<-"JA",
ifelse(zonaintifarma=="LIMA SUR",dimexa$DSCVEND[nrowintifarma]<-"JA",
)))))
# PARA EL OTRO RUC 20543001075
nrowotroruc<-which(dimexa$`RUC CLIENTE`=="20543001075",arr.ind = TRUE)
zonanrowotroruc<-dimexa$ZONA[nrowotroruc]
ifelse(zonanrowotroruc=="LIMA CALLAO",dimexa$DSCVEND[nrowotroruc]<-"AB",
ifelse(zonanrowotroruc=="LIMA OESTE",dimexa$DSCVEND[nrowotroruc]<-"KM",
ifelse(zonanrowotroruc=="LIMA ESTE",dimexa$DSCVEND[nrowotroruc]<-"KM",
ifelse(zonanrowotroruc=="LIMA NORTE",dimexa$DSCVEND[nrowotroruc]<-"JA",
ifelse(zonanrowotroruc=="LIMA SUR",dimexa$DSCVEND[nrowotroruc]<-"JA",
)))))
# probando...
# encontré que la solución es la asignación mediante "<-", caso contrario me da una verificacion de verdad o falsedad
dimexa$DSCVEND[nrowintifarma]
dimexa$ZONA[nrowintifarma]
# ahora le decimos que para esas filas ponga una E en la columna Eliminar
data2$ELIMINAR[BRUNYNROW]="E"
data2$ELIMINAR[MERCEDESNROW]="E"
dimexa$ZONA[nrowintifarma]="LIMA OESTE"
# borrando el mes actual para que no se repita la data
sqlQuery(sqluis,paste0("delete from Venta_Lansier where periodo='01/",
ifelse(month(today())<10,paste0(0,month(today())),month(today())),
"/",year(today()),"'") )
# agregando la data de dimexa de este periodo al sql
sqlSave(sqluis,dimexa,tablename = "Venta_Lansier",rownames = FALSE,append = TRUE,fast = FALSE)
View(dimexa)
# agregando la data de dimexa de este periodo al sql
sqlSave(sqluis,dimexa,tablename = "Venta_Lansier",rownames = FALSE,append = TRUE,fast = FALSE,colnames = FALSE)
# agregando la data de dimexa de este periodo al sql
sqlSave(sqluis,dimexa,tablename = "Venta_Lansier",rownames = FALSE,append = TRUE,fast = FALSE,colnames = FALSE)
View(dimexa)
# agregando la data de dimexa de este periodo al sql
sqlSave(sqluis,dimexa,tablename = "Venta_Lansier",rownames = FALSE,append = TRUE,fast = TRUE,colnames = FALSE)
# agregando la data de dimexa de este periodo al sql
sqlSave(sqluis,dimexa,tablename = "Venta_Lansier",rownames = FALSE,append = TRUE,fast =FALSE,colnames = FALSE)
dimexa[1,24]
dimexa[24,24]
dimexa[1,23]
dimexa[,24]
dimexa[,24]==""
dimexa[,24]=""
View(dimexa)
# agregando la data de dimexa de este periodo al sql
sqlSave(sqluis,dimexa,tablename = "Venta_Lansier",rownames = FALSE,append = TRUE,fast =FALSE,colnames = FALSE)
View(dimexa)
# agregando la data de dimexa de este periodo al sql
sqlSave(sqluis,dimexa,tablename = "Venta_Lansier",rownames = FALSE,append = TRUE,fast =FALSE)
# agregando la data de dimexa de este periodo al sql
sqlSave(sqluis,dimexa,tablename = "Venta_Lansier",rownames = FALSE,append = TRUE,fast =FALSE)
# agregando la data de dimexa de este periodo al sql
sqlSave(sqluis,dimexa,tablename = "Venta_Lansier",rownames = FALSE,append = TRUE,fast =FALSE)
# agregando la data de dimexa de este periodo al sql
sqlSave(sqluis,dimexa,tablename = "Venta_Lansier",rownames = FALSE,append = TRUE,fast =FALSE)
View(dimexa)
colnames(dimexa)
colnames(dimexa)[1,24]
colnames(dimexa)[1,22]
colnames(dimexa)[,24]
colnames(dimexa)[1,1]
colnames(dimexa)
colnames(dimexa[1,24])
colnames(dimexa[,2])
colnames(dimexa)
colnames(dimexa)[]
colnames(dimexa)[4]
colnames(dimexa)[24]
colnames(dimexa)[24]<-"categorizacion"
colnames(dimexa)
# agregando la data de dimexa de este periodo al sql
sqlSave(sqluis,dimexa,tablename = "Venta_Lansier",rownames = FALSE,append = TRUE,fast =FALSE)
colnames(dimexa)
colnames(dimexa)<-c("fuente","periodo","idfactura","fecha","ruc","eliminar","clienom","tipocondi","artdes","artdesValid","cant","subtotal","dsczonadet","dsczona","dscven","tipoart","colorequi","ppuni","ppsol","flag","dpto","distrito","provincia","categorizacion")
colnames(dimexa)
View(dimexa)
# agregando la data de dimexa de este periodo al sql
sqlSave(sqluis,dimexa,tablename = "Venta_Lansier",rownames = FALSE,append = TRUE,fast =FALSE)
# agregando la data de dimexa de este periodo al sql
sqlSave(sqluis,dimexa,tablename = "Venta_Lansier",rownames = FALSE,append = TRUE,fast =FALSE)
# agregando la data de dimexa de este periodo al sql
sqlSave(sqluis,dimexa,tablename = "Venta_Lansier",rownames = FALSE,append = TRUE,fast =FALSE,verbose = TRUE)
View(dimexa)
# agregando la data de dimexa de este periodo al sql
sqlSave(sqluis,dimexa,tablename = "Venta_Lansier",rownames = FALSE,append = TRUE,fast =FALSE,verbose = TRUE)
colnames(dimexa)<-c("fuente","periodo","idfactura","fecha","ruc","eliminar","clienom",
"tipocondi","artdes","artdesValid","cant","subtotal","dsczonadet","dsczona",
"dscven","tipoart","colorequi","ppuni","ppsol","flag","dpto","distrito","provincia","categorizacin")
# agregando la data de dimexa de este periodo al sql
sqlSave(sqluis,dimexa,tablename = "Venta_Lansier",rownames = FALSE,append = TRUE,fast =FALSE,verbose = TRUE)
colnames(dimexa)<-c("fuente","periodo","idfactura","fecha","ruc","eliminar","clienom",
"tipocondi","artdes","artdesValid","cant","subtotal","dsczonadet","dsczona",
"dscven","tipoart","colorequi","ppuni","ppsol","flag","dpto","distrito","provincia","categorizacion")
library(dplyr)
library(readxl)
library(lubridate)
library(writexl)
data<-read_xlsx(path = paste0("C:\\Users\\LBarrios\\Downloads\\LANSIER-",
year(today()),
"-",
ifelse(month(today())==12,"DICIEMBRE","ENERO"),
".xlsx" ))
# creando columna fuente que diga M&M
data<-data %>% mutate(FUENTE="M&M")
# creando columna periodo con el primer dia del mes a actualizar
data<-data %>% mutate(periodo=paste0("01/",month(today()),"/",year(today())))
# insertando columna ELIMINAR en vacio
data<-data %>% mutate(ELIMINAR="")
# creando columna DSCZONA
data<-data %>% mutate(DSCZONA="")
# creando ppuni ppsol flag dpto dist prov que estaran vacias
data<-data %>% mutate(ppuni="") %>%
mutate(ppsol="") %>% mutate(flag="") %>% mutate(dpto="") %>% mutate(dist="") %>% mutate(prov="")
# DATA2 TIENE EL FORMATO QUE SE CARGARIA AL SQL
data2<-data %>%
select(FUENTE,
periodo,NUMERO,
FECHA,RUC,ELIMINAR,
`NOMBRE CLIENTE`,DOCUMENTO,DESCRIPCION,CANTIDAD,
SUBTOT,DSCZONA,VENDEDOR,ppuni,ppsol,flag,DEPARTAMENTO,LOCALIDAD,PROVINCIA)
# trayendo el excel con todas las localidades para mym con lo cual se cruzará todo
# con esto leo el maestro lansier con el cual cruzare mi data
maestrolansier <- read_xlsx("maestrolansier.xlsx")
localidadesmym <- read_xlsx("localidadesmym.xlsx")
localidadesmym<-localidadesmym %>% select(LOCALIDAD,ZONA)
# PRIMERO CRUZAMOS CONTRA EL MAESTRO LANSIER
# aqui selecciono lo que voy a cruzar
# df1<-data2 %>% select(Artículo)
df2<-maestrolansier %>% select(`M&M`,`artdsc VALID`,TIPO,equipo)
# cambio el nombre a df2 para que coincida el nombre de la columna articulo para poder hacer el merge
colnames(df2)<-c("DESCRIPCION","artdesvalid","tipo","equipo")
# con esto quito los espacios adelante y detrás del artdesvalid Y LOS ARTICULOS
data2$DESCRIPCION<-trimws(data2$DESCRIPCION,"b")
df2$DESCRIPCION<-trimws(df2$DESCRIPCION,"b")
df2$artdesvalid<-trimws(df2$artdesvalid,"b")
# ----------------------------------------------------- #
# ---CRUCE DE INFORMACIÓN PARA OBTENER LOS VALIDADOS--- #
# ----------------------------------------------------- #
# cruzando para obtener los validados, tipo y equipo
ArtdesValid2<-merge(x = data2, y = df2, by.x = "DESCRIPCION", all.x = TRUE)
# validando que esten las mismas localidades
localidadesnuevasmym<-ArtdesValid2[!ArtdesValid2$LOCALIDAD %in% localidadesmym$LOCALIDAD,]
#
# CRUZANDO PARA OBTENER LA LOCALIDAD
ArtdesValid3<-merge(x = ArtdesValid2, y=localidadesmym, by.x = "LOCALIDAD", all.x = TRUE)
ArtdesValid3<-ArtdesValid3 %>%
select(FUENTE,periodo,NUMERO,FECHA,RUC,ELIMINAR,`NOMBRE CLIENTE`,DOCUMENTO,DESCRIPCION,artdesvalid,CANTIDAD,
SUBTOT,DSCZONA,ZONA,VENDEDOR,tipo,equipo,ppuni,ppsol,flag,DEPARTAMENTO,LOCALIDAD,PROVINCIA)
write_xlsx(ArtdesValid3,"mym.xlsx")
# en esta ocasion todo ha cruzado asi que esta bien
# este codigo de abajo es para ver si todas las localidades son las mismas
# a<-subset(data, !(LOCALIDAD %in% localidadesmym$LOCALIDAD))
rm(list = ls())
library(RSelenium)
library(rvest)
library(dplyr)
library(lubridate)
library(readxl)
library(lubridate)
library(writexl)
library(qdapTools)
library(plyr)
library(lookup)
library(XLConnect)
library(dplyr)
library(readxl)
data <- readWorksheetFromFile(paste0("C:\\Users\\LBarrios\\Downloads\\FacMet_",
year(today()),
ifelse(month(today())<10,paste0("0",month(today())),month(today())) ,
ifelse(day(today())<10,paste0("0",day(today())),day(today())),".xls"),
sheet = "FacturacionMetronic",
startRow = 6,
startCol = 1)
# retirando las columnas que eran merge de las otras
data<-data %>% select(-Col6,-Col12)
# seleccionando data del periodo 202111 o segun corresponda
data<-data %>% filter(Periodo==paste0(year(today()),
ifelse(month(today())<10,paste0("0",month(today())),month(today()))))
# borrando los valores de articulo iguales a productos covid
data<-data %>% filter(!(Artículo %in%
c("VESOGVT001","VESOGVT002","VESOTR001","VESOTR002","VESOTR003","VESOTR004","VEDMLN001")))
# borrando de columna Vendedor = OFICINA
data<-data %>% filter(!(Vendedor %in% c("OFICINA")))
# creando columna fuente que diga METRONIC
data<-data %>% mutate(FUENTE="METRONIC")
# creando columna periodo con el primer dia del mes a actualizar
data<-data %>% mutate(periodo=paste0("01/",
ifelse(month(today())<10,paste0("0",month(today())),month(today())),
"/",year(today())))
# insertando columna ELIMINAR en vacio
data<-data %>% mutate(ELIMINAR="")
# creando columna DSCZONA
data<-data %>% mutate(DSCZONA="")
# creando ppuni ppsol flag dpto dist prov que estaran vacias
data<-data %>% mutate(ppuni="") %>% mutate(ppsol="") %>% mutate(flag="") %>% mutate(dpto="") %>% mutate(dist="") %>% mutate(prov="")
# seleccionando solo las columnas que nos interesan
# DATA2 TIENE EL FORMATO QUE SE CARGARIA AL SQL
data2<-data %>%
select(FUENTE,periodo,Nro.Doc,Fecha,Ruc,ELIMINAR,Cliente,Condición,Artículo,Cant,Subtotal,DSCZONA,Zona,Vendedor,ppuni,ppsol,flag,dpto,dist,prov)
# con esto leo el maestro lansier con el cual cruzare mi data
maestrolansier <- read_xlsx("maestrolansier.xlsx")
# aqui selecciono lo que voy a cruzar
# df1<-data2 %>% select(Artículo)
df2<-maestrolansier %>% select(METRONIC,`artdsc VALID`,TIPO,equipo)
# con esto quito los espacios adelante y detrás del artdesvalid Y LOS ARTICULOS
# df1$Artículo<-trimws(df1$Artículo,"b")
# df2$Artículo<-trimws(df2$Artículo,"b")
# df2$artdesvalidvalid<-trimws(df2$artdesvalidvalid,"b")
# # probando el mismo proceso pero directamente para data 2 y ya no para df1
data2$Artículo<-trimws(data2$Artículo,"b")
data2$Artículo<-trimws(data2$Artículo,"b")
df2$artdesvalid<-trimws(df2$artdesvalid,"b")
# cambio el nombre a df2 para que coincida el nombre de la columna articulo para poder hacer el merge
colnames(df2)<-c("Artículo","artdesvalid","tipo","equipo")
# cruzando para obtener los validados, tipo y equipo
ArtdesValid2<-merge(x = data2, y = df2, by.x = "Artículo", all.x = TRUE)
data3<-ArtdesValid2 %>%
select(FUENTE,periodo,Nro.Doc,Fecha,Ruc,ELIMINAR,Cliente,Condición,Artículo,artdesvalid,Cant,Subtotal,DSCZONA,Zona,Vendedor,tipo,equipo,ppuni,ppsol,flag,dpto,dist,prov)
# creando el excel con la data ya formateada
# es fundamental utilizar la funcion write_xlsx ya que esta nos permite sobre escribir el excel sin tener que borrarlo previamente
write_xlsx(data3,"metronic.xlsx")
# LISTO TERMINADO
#------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------#
# ------------ con trimws puedo quitar los espacios iniciales y finales de un texto --------- #
#---------------------------------------------------------------------------------------------#
# x<- "  texto con espacios "
# trimws(x,"b")
# x<-c(" asds ", " asdasdas","sdasdas ","    asdasd  asd   asd    ","  asdsa  2  ")
# trimws(x,"b")
rm(list = ls())
source("C:/Users/LBarrios/Desktop/SQLDATAEXTRACTOR/rselenium/metronicdownload.R", encoding = 'UTF-8')
