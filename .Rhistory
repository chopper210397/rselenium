data_maestro<-merge(x = data2, y = df2, by.x = "NOMBRE PRODUCTO", all.x = FALSE)
# ----------------------------------------------------- #
# ---CRUCE DE INFORMACIÓN PARA OBTENER LOS VALIDADOS--- #
# ----------------------------------------------------- #
# cruzando para obtener los validados, tipo y equipo
# ArtdesValid2<-merge(x = data2, y = df2, by.x = "NOMBRE PRODUCTO", all.x = TRUE)
# utilizamos con all.x = false porque de ese modo no trae las toallitas humedas ni alcohol en gel, dado que no
# son productos de lansier
data_maestro<-merge(x = data2, y = df2, by.x = "NOMBRE PRODUCTO", all.x = FALSE)
# CRUZANDO PARA OBTENER LA LOCALIDAD
# 1. concatenamos departamento + distrito de nuestra data_maestro para generar la llave
data_maestro<-data_maestro %>% mutate(LLAVE=paste0(DEPARTAMENTO,DISTRITO))
# TRAEMOS LA DATA DE LOCALIDADESDIMEXA
localidadesdimexa <- read_xlsx("localidadesdimexa.xlsx")
localidadesdimexa<-localidadesdimexa %>% select(LLAVE,ZONA)
localidadesdimexa$LLAVE<-trimws(localidadesdimexa$LLAVE,"b")
localidadesdimexa$ZONA<-trimws(localidadesdimexa$ZONA,"b")
data_maestro$LLAVE<-trimws(data_maestro$LLAVE,"b")
# VALIDANDO QUE HAYA LAS MISMAS LOCALIDADES TANTO EN NUESTRO EXCEL DESCARGADO COMO EN EL MAESTRO DE LOCALIDADES,
# SI NO ESTAN DEBERÁN AGREGARSE PARA QUE PUEDAN CRUZARSE CORRECTAMENTE LUEGO.
localidadesnuevasdimexa<-data_maestro[!data_maestro$LLAVE %in% localidadesdimexa$LLAVE,]
write_xlsx(localidadesnuevasdimexa,"localidadesnuevasdimexa.xlsx")
data_maestro_localidades<-merge(x = data_maestro, y=localidadesdimexa, by.x = "LLAVE", all.x = TRUE)
# TRAEMOS LA DATA DE VENDEDORES PARA CRUZARLA MEDIANTE EL RUC
vendedoresdimexa<-read_xlsx("vendedoresdimexa.xlsx")
vendedoresdimexa<-vendedoresdimexa %>% select(ruc,flag)
colnames(vendedoresdimexa)<-c("RUC CLIENTE","DSCVEND")
# quitando los espacios en blanco delante y detrás
data_maestro_localidades$`RUC CLIENTE`<-trimws(data_maestro_localidades$`RUC CLIENTE`,"b")
vendedoresdimexa$`RUC CLIENTE`<-trimws(vendedoresdimexa$`RUC CLIENTE`,"b")
# combinando y validando con la data de vendedoresdimexa para traer el dscvend o flag como está en vendedoresdimexa
dimexa<-merge(data_maestro_localidades,vendedoresdimexa,by.x = "RUC CLIENTE",all.x = TRUE)
# dandole orden a nuestro excel
dimexa<-dimexa %>%
select(FUENTE,periodo,`NUMERO FACTURA`,FECHA,`RUC CLIENTE`,ELIMINAR,
`NOMBRE CLIENTE`,`TIPO DOCUMENTO`,`NOMBRE PRODUCTO`,artdesvalid,
CANTIDAD,`SUB TOTAL`,DSCVEND,ZONA,`NOMBRE VENDEDOR`,tipo,equipo,ppuni,ppsol,flag,DEPARTAMENTO,DISTRITO,PROVINCIA)
# generando el xlsx con la data para subir al visor o sql
write_xlsx(dimexa,"dimexa.xlsx")
# limpiando nuestra ventana
rm(list=ls())
# dado que los nombres de las carpetas que genera b2binretail son totalmente aleatorios y no les puedo
# encontrar un patrón, debe hacerse manual el cambio de nombres para que cualquiera pueda correr
# este script, por lo tanto una vez descargada la data de b2binretail, manualmente debe descomprimirse
# y al excel que nos da ponerle de nombre b2binretail
library(readxl)
library(dplyr)
library(lubridate)
library(readr)
library(RODBC)
#--------------------
# ------------ con trimws puedo quitar los espacios iniciales y finales de un texto --------- #
# x<- "  texto con espacios "
# trimws(x,"b")
#--------------------
data<-read.csv(file = "C:/Users/LBarrios/Downloads/b2binretail.csv")
data<-data %>% mutate(fecha_update=(as.Date(paste0(ifelse(day(today())-1<10,paste0("0",day(today())-1),day(today())-1),
"/",
month(today()),
"/",
year(today())),"%d/%m/%Y")))
data<-data %>% mutate(periodo=as.Date( paste0("01","/",month(today()),"/",year(today())),"%d/%m/%Y")) #esta fecha esta para el mes actual, si se desea algun mes en especial se debe cambiar
# DESCRIPCION
# INVENTARIO.u.
# INVENTARIO.S.
# -----------formato ventas-----------
# periodo
# fecha_update
# DESCRIPCION
# COD_LOCAL
# VTA_PERIODO_UNID
# VALOR_VTA_PUB_PERIODO_S
stock<-data %>% select(fecha_update,COD_LOCAL,DESCRIPCION,INVENTARIO.u.,INVENTARIO.S.)
venta<-data %>% select(periodo,fecha_update,DESCRIPCION,COD_LOCAL,VTA_PERIODO_UNID,VALOR_VTA_PUB_PERIODO_S)
# write_tsv(venta, file = "ventab2b.txt",na = " ")
# rm(list=ls())
#---------------------------------------------------------------------#
#                subiendo la data directamente al SQL                 #
#---------------------------------------------------------------------#
# para esta ocasion se creó una conexión ODBC or somethin like that para poder conectarnos a la
# base de datos de Inretail, porque SQLuis era para la base de datos BI_Comercial
# si logro realizar este paso ya no deberia generar los txt de stock y venta :D
sqlb2b<-odbcConnect("SQLb2b",uid = "sa",pwd = "Comercial.2020")
# BORRANDO EL STOCKB2B Y EL MES ACTUAL DE VENTASB2B EN EL SQL
# para stock
sqlQuery(sqlb2b,"delete from StockInretail")
# para venta
sqlQuery(sqlb2b, paste0("delete from VentaInretail where periodo='01/",
ifelse(month(today())<10,paste0(0,month(today())),month(today())) ,
"/",year(today()),"'"))
# SUBIENDO EL STOCK AL SQL
sqlSave(sqlb2b,stock,tablename = "StockInretail",rownames = FALSE,append = TRUE,fast = FALSE)
# SUBIENDO LA VENTA AL SQL
sqlSave(sqlb2b,venta,tablename = "VentaInretail",rownames = FALSE,append = TRUE,fast = FALSE)
# OJO:  si pongo fast equal true deberia cargar mas rapido la data pero no me permite porque
# hay algun problema con los formatos de data o algo asi, si se puede mejorar a futuro seria genial, ya
# que podria cargar toda la data de un solo porraso, sino igual la subida tarda algo de 7 minutos aprox.
rm(list=ls())
library(readxl)
library(dplyr)
library(lubridate)
library(readr)
library(RODBC)
library(qdapTools)
library(plyr)
library(lookup)
library(XLConnect)
library(readxl)
library(dplyr)
library(lubridate)
library(readr)
library(RODBC)
library(qdapTools)
library(plyr)
library(lookup)
library(XLConnect)
# especificamos los col_types porque la columna del total viene con formato posixct asi que debemos especificarle que es numeric
data<-read_xls("C:\\Users\\LBarrios\\Downloads\\AVANCE_LINEA_125.xls",skip = 1,
col_types = c("text","text","text","date","text","text","text","text","text","text","text"
,"text","text","text","numeric","numeric"))
# cambiando formato de la fecha
data$Fecha<-paste0(ifelse(day(data$Fecha)<10,paste0(0,day(data$Fecha)),day(data$Fecha)),
"-",
ifelse(month(data$Fecha)<10,paste0(0,month(data$Fecha)),month(data$Fecha))  ,
"-",
year(data$Fecha))
# creando columna fuente que diga METRONIC
data<-data %>% mutate(FUENTE="CASTILLO")
# creando columna periodo con el primer dia del mes a actualizar
data<-data %>% mutate(periodo=paste0("01/",
ifelse(month(today())<10,paste0("0",month(today())),month(today())),
"/",
year(today())))
# insertando columna ELIMINAR en vacio
data<-data %>% mutate(ELIMINAR="")
# creando columna DSCZONA
data<-data %>% mutate(DSCVEND="")
# creando ppuni ppsol flag dpto dist prov que estaran vacias
data<-data %>% mutate(ppuni="") %>% mutate(ppsol="") %>% mutate(flag="") %>% mutate(TIPO="")
data2<-data %>%
select(FUENTE,periodo,Factura,Fecha,RUC,ELIMINAR,
RazComercial,TIPO,`Dsc Producto`,
cantidad,Total,DSCVEND,Vendedor,ppuni,ppsol,flag,Dept,Dist,Prov)
# LEYENDO DATA NECESARIA PARA VALIDAR
maestrolansier <- read_xlsx("maestrolansier.xlsx")
# selecciono solo lo que voy a querer de maestro lansier que para este caso seria DIMEXA artdesvalid tipo y equipo
df2<-maestrolansier %>% select(CASTILLO,`artdsc VALID`,TIPO,equipo)
# cambio el nombre a df2 para que coincida el nombre de la columna articulo para poder hacer el merge
colnames(df2)<-c("Dsc Producto","artdesvalid","tipo","equipo")
# CON ESTO QUITO LOS ESPACIOS AL COMIENZO Y EL FINAL DE LOS ARTICULOS PORQUE NO PERMITIAN CRUZAR TODO
data2$`Dsc Producto`<-trimws(data2$`Dsc Producto`,"b")
df2$`Dsc Producto`<-trimws(df2$`Dsc Producto`,"b")
df2$artdesvalid<-trimws(df2$artdesvalid,"b")
# PRODUCTOS NUEVOS ARTDESVALID
productosnuevoscastillo<-data2[!data2$`Dsc Producto` %in% df2$`Dsc Producto`,]
write_xlsx(productosnuevoscastillo,"productosnuevoscastillo.xlsx")
# TRAYENDO ARTDESVALID TIPO Y EQUIPO
data_maestro<-merge(x = data2, y = df2, by.x = "Dsc Producto", all.x = FALSE)
# TRAER DATA LOCALIDADES CASTILLO
localidadescastillo <- read_xlsx("localidadescastillo.xlsx")
localidadescastillo<-localidadescastillo %>% select(Dist,ZONA)
localidadescastillo$Dist<-trimws(localidadescastillo$Dist,"b")
localidadescastillo$ZONA<-trimws(localidadescastillo$ZONA,"b")
data_maestro$Dist<-trimws(data_maestro$Dist,"b")
# convitiendo distritos a minusculas y escogiendo los distintos
localidadescastillo<-localidadescastillo %>%
distinct(tolower( Dist), .keep_all = TRUE) %>% select(ZONA,`tolower(Dist)`)
colnames(localidadescastillo)<-c("ZONA","Dist")
data_maestro$Dist<-tolower(data_maestro$Dist)
# VALIDANDO ZONAS NUEVAS
# PROBLEMA HALLADO: Las localides nuevas castillo son demasiadas porque al momento de hacer buscarV no esta encontrado casi nada
# ya que R no toma como igual una mayuscula y una minuscula  a diferencia de EXCEL.
# por lo tanto se debe poner a minuscula/mayuscula al menos para el cruce
# data_maestro$Dist[853]="villasalvajeje"
localidadesnuevascastillo<-data_maestro[!toupper(data_maestro$Dist) %in% toupper(localidadescastillo$Dist),]
write_xlsx(localidadesnuevascastillo,"localidadesnuevascastillo.xlsx")
# TRAER DATA LOCALIDADES CASTILLO
localidadescastillo <- read_xlsx("localidadescastillo.xlsx")
localidadescastillo<-localidadescastillo %>% select(Dist,ZONA)
localidadescastillo$Dist<-trimws(localidadescastillo$Dist,"b")
localidadescastillo$ZONA<-trimws(localidadescastillo$ZONA,"b")
data_maestro$Dist<-trimws(data_maestro$Dist,"b")
# convitiendo distritos a minusculas y escogiendo los distintos
localidadescastillo<-localidadescastillo %>%
distinct(tolower( Dist), .keep_all = TRUE) %>% select(ZONA,`tolower(Dist)`)
colnames(localidadescastillo)<-c("ZONA","Dist")
data_maestro$Dist<-tolower(data_maestro$Dist)
# VALIDANDO ZONAS NUEVAS
# PROBLEMA HALLADO: Las localides nuevas castillo son demasiadas porque al momento de hacer buscarV no esta encontrado casi nada
# ya que R no toma como igual una mayuscula y una minuscula  a diferencia de EXCEL.
# por lo tanto se debe poner a minuscula/mayuscula al menos para el cruce
# data_maestro$Dist[853]="villasalvajeje"
localidadesnuevascastillo<-data_maestro[!toupper(data_maestro$Dist) %in% toupper(localidadescastillo$Dist),]
write_xlsx(localidadesnuevascastillo,"localidadesnuevascastillo.xlsx")
# AQUI MANUALMENTE SE DEBE PREGUNTAR AL SEÑOR RICARDO A QUE ZONAS PERTENECEN ESAS NUEVAS LOCALIDADES, UNA VEZ AGREGADAS
# EN EL EXCEL DE LOCALIDADES DIMEXA YA SE DEBE REGRESAR A R Y CORRE                                                     R ESTA VEZ EL PROGRAMA COMPLETO
data_maestro_localidades<-merge(x = data_maestro, y=localidadescastillo, by.x = "Dist", all.x = TRUE)
data_maestro_localidades<-data_maestro_localidades %>%
select(FUENTE,periodo,Factura,Fecha,RUC,ELIMINAR,RazComercial,TIPO,`Dsc Producto`,artdesvalid,cantidad,
Total,DSCVEND,ZONA,Vendedor,tipo,equipo,ppuni,ppsol,flag,Dept,Dist,Prov)
write_xlsx(data_maestro_localidades,"castillo.xlsx")
# limpiando nuestra ventana
rm(list=ls())
library(readxl)
library(dplyr)
library(lubridate)
library(readr)
library(RODBC)
library(qdapTools)
library(plyr)
library(lookup)
library(XLConnect)
# con esto leemos la data de una fecha en específico dado que si no tenemos la data de hoy pero
# queremos cargar la data que nos pasaron de otro día copiamos el nombre del archivo en vez de lo nuestro
data<-read_xls("C:\\Users\\LBarrios\\Downloads\\AVANCE DE VENTAS LANSIER 22.01.22.xls", sheet = "DATA",skip = 4)
# con esto leemos la data de una fecha en específico dado que si no tenemos la data de hoy pero
# queremos cargar la data que nos pasaron de otro día copiamos el nombre del archivo en vez de lo nuestro
data<-read_xls("C:\\Users\\LBarrios\\Downloads\\AVANCE DE VENTAS LANSIER 29.01.22.xls", sheet = "DATA",skip = 4)
# eliminado la fila de totales ya que es la última fila siempre la eliminamos
totalrow<-nrow(data)
# totalrow<-which(data$VALOR=="203541.4974")
data<-data[-totalrow,]
# cambiando formato de la fecha
data$FECHA<-paste0(ifelse(day(data$FECHA)<10,paste0(0,day(data$FECHA)),day(data$FECHA)),
"-",
ifelse(month(data$FECHA)<10,paste0(0,month(data$FECHA)),month(data$FECHA))  ,
"-",
year(data$FECHA))
# creando columna fuente que diga METRONIC
data<-data %>% mutate(FUENTE="DIFARLIB")
# creando columna periodo con el primer dia del mes a actualizar
data<-data %>% mutate(periodo=paste0("01/",
ifelse(month(today())<10,paste0("0",month(today())),month(today())),
"/",
year(today())))
# insertando columna ELIMINAR en vacio
data<-data %>% mutate(ELIMINAR="")
# creando columna DSCZONA
data<-data %>% mutate(DSCVEND="")
# creando ppuni ppsol flag dpto dist prov que estaran vacias
data<-data %>% mutate(ppuni="") %>% mutate(ppsol="") %>% mutate(flag="")
# UNIENDO PRODUCTO Y PRESENTACION PARA HACER ARTDES
data$ARTDES<-paste0(data$PRODUCTO," ",data$PRESENTACION)
# seleccionando solo las columnas que nos interesan
# DATA2 TIENE EL FORMATO QUE SE CARGARIA AL SQL
# AQUI NO ESTOY PONIENDO ZONA NI DSCVEND NI TIPO NI EQUIPO
# NI ARTDESVALID PORQUE ESOS SERAN LOS QUE TRAERÉ CON EL MERGE
data2<-data %>%
select(FUENTE,periodo,NUMERO,FECHA,`RUC/DNI`,ELIMINAR,
`NOMBRE COMERCIAL`,TIPO,ARTDES,
CANT.,VALOR,DSCVEND,VENDEDOR,ppuni,ppsol,flag,DEPARTAMENTO,DISTRITO...24,PROVINCIA...23)
# LEYENDO DATA NECESARIA PARA VALIDAR
maestrolansier <- read_xlsx("maestrolansier.xlsx")
# selecciono solo lo que voy a querer de maestro lansier que para este caso seria DIMEXA artdesvalid tipo y equipo
df2<-maestrolansier %>% select(DIFARLIB,`artdsc VALID`,TIPO,equipo)
# cambio el nombre a df2 para que coincida el nombre de la columna articulo para poder hacer el merge
colnames(df2)<-c("ARTDES","artdesvalid","tipo","equipo")
# CON ESTO QUITO LOS ESPACIOS AL COMIENZO Y EL FINAL DE LOS ARTICULOS PORQUE NO PERMITIAN CRUZAR TODO
data2$ARTDES<-trimws(data2$ARTDES,"b")
df2$ARTDES<-trimws(df2$ARTDES,"b")
df2$artdesvalid<-trimws(df2$artdesvalid,"b")
# PRODUCTOS NUEVOS ARTDESVALID
productosnuevosdifarlib<-data2[!data2$ARTDES %in% df2$ARTDES,]
write_xlsx(productosnuevosdifarlib,"productosnuevosdifarlib.xlsx")
# TRAYENDO ARTDESVALID TIPO Y EQUIPO
data_maestro<-merge(x = data2, y = df2, by.x = "ARTDES", all.x = FALSE)
# creando la combinacion
data_maestro<-data_maestro %>% mutate(COMBINACION=paste0(PROVINCIA...23,DISTRITO...24))
# TRAER DATA LOCALIDADES DIFARLIB
localidadesdifarlib <- read_xlsx("localidadesdifarlib.xlsx")
localidadesdifarlib<-localidadesdifarlib %>% select(COMBINACION,ZONA)
localidadesdifarlib$COMBINACION<-trimws(localidadesdifarlib$COMBINACION,"b")
localidadesdifarlib$ZONA<-trimws(localidadesdifarlib$ZONA,"b")
data_maestro$COMBINACION<-trimws(data_maestro$COMBINACION,"b")
# VALIDANDO ZONAS NUEVAS
localidadesnuevasdifarlib<-data_maestro[!data_maestro$COMBINACION %in% localidadesdifarlib$COMBINACION,]
write_xlsx(localidadesnuevasdifarlib,"localidadesnuevasdifarlib.xlsx")
# AQUI MANUALMENTE SE DEBE PREGUNTAR AL SEÑOR RICARDO A QUE ZONAS PERTENECEN ESAS NUEVAS LOCALIDADES, UNA VEZ AGREGADAS
# EN EL EXCEL DE LOCALIDADES DIMEXA YA SE DEBE REGRESAR A R Y CORRER ESTA VEZ EL PROGRAMA COMPLETO
data_maestro_localidades<-merge(x = data_maestro, y=localidadesdifarlib, by.x = "COMBINACION", all.x = TRUE)
data_maestro_localidades<-data_maestro_localidades %>%
select(FUENTE,periodo,NUMERO,FECHA,`RUC/DNI`,ELIMINAR,`NOMBRE COMERCIAL`,TIPO,ARTDES,artdesvalid,CANT.,
VALOR,DSCVEND,ZONA,VENDEDOR,tipo,equipo,ppuni,ppsol,flag,DEPARTAMENTO,DISTRITO...24,PROVINCIA...23)
write_xlsx(data_maestro_localidades,"difarlib.xlsx")
# limpiando nuestra ventana
rm(list=ls())
library(RSelenium)
library(rvest)
library(dplyr)
library(lubridate)
library(readxl)
library(lubridate)
library(writexl)
# install.packages("qdapTools")
library(qdapTools)
library(plyr)
library(lookup)
library(XLConnect)
library(dplyr)
library(readxl)
data <- readWorksheetFromFile(paste0("C:\\Users\\LBarrios\\Downloads\\FacMet_",
year(today()),
ifelse(month(today())<10,paste0("0",month(today())),month(today())) ,
ifelse(day(today())<10,paste0("0",day(today())),day(today())),".xls"),
sheet = "FacturacionMetronic",
startRow = 6,
startCol = 1)
Sys.sleep(4)
# retirando las columnas que eran merge de las otras
data<-data %>% select(-Col6,-Col12)
# seleccionando data del periodo 202111 o segun corresponda
data<-data %>% filter(Periodo==paste0(year(today()),
ifelse(month(today())<10,paste0("0",month(today())),month(today()))))
# borrando los valores de articulo iguales a productos covid
data<-data %>% filter(!(Artículo %in%
c("VESOGVT001","VESOGVT002","VESOTR001","VESOTR002","VESOTR003","VESOTR004","VEDMLN001")))
# borrando de columna Vendedor = OFICINA
data<-data %>% filter(!(Vendedor %in% c("OFICINA")))
# creando columna fuente que diga METRONIC
data<-data %>% mutate(FUENTE="METRONIC")
# creando columna periodo con el primer dia del mes a actualizar
data<-data %>% mutate(periodo=paste0("01/",
ifelse(month(today())<10,paste0("0",month(today())),month(today())),
"/",year(today())))
# insertando columna ELIMINAR en vacio
data<-data %>% mutate(ELIMINAR="")
# creando columna DSCZONA
data<-data %>% mutate(DSCZONA="")
# creando ppuni ppsol flag dpto dist prov que estaran vacias
data<-data %>% mutate(ppuni="") %>% mutate(ppsol="") %>% mutate(flag="") %>% mutate(dpto="") %>% mutate(dist="") %>% mutate(prov="")
# seleccionando solo las columnas que nos interesan
# DATA2 TIENE EL FORMATO QUE SE CARGARIA AL SQL
data2<-data %>%
select(FUENTE,periodo,Nro.Doc,Fecha,Ruc,ELIMINAR,Cliente,Condición,Artículo,Cant,Subtotal,DSCZONA,Zona,Vendedor,ppuni,ppsol,flag,dpto,dist,prov)
# con esto leo el maestro lansier con el cual cruzare mi data
maestrolansier <- read_xlsx("maestrolansier.xlsx")
# aqui selecciono lo que voy a cruzar
# df1<-data2 %>% select(Artículo)
df2<-maestrolansier %>% select(METRONIC,`artdsc VALID`,TIPO,equipo)
# con esto quito los espacios adelante y detrás del artdesvalid Y LOS ARTICULOS
# df1$Artículo<-trimws(df1$Artículo,"b")
# df2$Artículo<-trimws(df2$Artículo,"b")
# df2$artdesvalidvalid<-trimws(df2$artdesvalidvalid,"b")
# # probando el mismo proceso pero directamente para data 2 y ya no para df1
data2$Artículo<-trimws(data2$Artículo,"b")
data2$Artículo<-trimws(data2$Artículo,"b")
df2$artdesvalid<-trimws(df2$artdesvalid,"b")
# cambio el nombre a df2 para que coincida el nombre de la columna articulo para poder hacer el merge
colnames(df2)<-c("Artículo","artdesvalid","tipo","equipo")
# cruzando para obtener los validados, tipo y equipo
# probando si hay productos diferentes
productosnuevosmetronic<-data2[!data2$Artículo %in% df2$Artículo,]
View(productosnuevosmetronic)
write_xlsx(productosnuevosdifarlib,"productosnuevosdifarlib.xlsx")
write_xlsx(productosnuevosmetronic,"productosnuevosmetronic.xlsx")
# con esto leo el maestro lansier con el cual cruzare mi data
maestrolansier <- read_xlsx("maestrolansier.xlsx")
# aqui selecciono lo que voy a cruzar
# df1<-data2 %>% select(Artículo)
df2<-maestrolansier %>% select(METRONIC,`artdsc VALID`,TIPO,equipo)
# con esto quito los espacios adelante y detrás del artdesvalid Y LOS ARTICULOS
# df1$Artículo<-trimws(df1$Artículo,"b")
# df2$Artículo<-trimws(df2$Artículo,"b")
# df2$artdesvalidvalid<-trimws(df2$artdesvalidvalid,"b")
# # probando el mismo proceso pero directamente para data 2 y ya no para df1
data2$Artículo<-trimws(data2$Artículo,"b")
data2$Artículo<-trimws(data2$Artículo,"b")
df2$artdesvalid<-trimws(df2$artdesvalid,"b")
# cambio el nombre a df2 para que coincida el nombre de la columna articulo para poder hacer el merge
colnames(df2)<-c("Artículo","artdesvalid","tipo","equipo")
# cruzando para obtener los validados, tipo y equipo
# probando si hay productos diferentes
productosnuevosmetronic<-data2[!data2$Artículo %in% df2$Artículo,]
write_xlsx(productosnuevosmetronic,"productosnuevosmetronic.xlsx")
#
ArtdesValid2<-merge(x = data2, y = df2, by.x = "Artículo", all.x = TRUE)
data3<-ArtdesValid2 %>%
select(FUENTE,periodo,Nro.Doc,Fecha,Ruc,ELIMINAR,Cliente,Condición,Artículo,artdesvalid,Cant,Subtotal,DSCZONA,Zona,Vendedor,tipo,equipo,ppuni,ppsol,flag,dpto,dist,prov)
# creando el excel con la data ya formateada
# es fundamental utilizar la funcion write_xlsx ya que esta nos permite sobre escribir el excel sin tener que borrarlo previamente
write_xlsx(data3,"metronic.xlsx")
library(dplyr)
library(readxl)
library(lubridate)
library(writexl)
library(writexl)
data<-read_xlsx(path = paste0("C:\\Users\\LBarrios\\Downloads\\LANSIER-",
year(today()),
"-",
ifelse(month(today())==12,"DICIEMBRE","ENERO"),
".xlsx" ))
# creando columna fuente que diga M&M
data<-data %>% mutate(FUENTE="M&M")
# creando columna periodo con el primer dia del mes a actualizar
data<-data %>% mutate(periodo=paste0("01/",
ifelse(month(today())<10,paste0("0",month(today())),month(today())),
"/",
year(today())))
# insertando columna ELIMINAR en vacio
data<-data %>% mutate(ELIMINAR="")
# creando columna DSCZONA
data<-data %>% mutate(DSCZONA="")
# creando ppuni ppsol flag dpto dist prov que estaran vacias
data<-data %>% mutate(ppuni="") %>%
mutate(ppsol="") %>% mutate(flag="") %>% mutate(dpto="") %>% mutate(dist="") %>% mutate(prov="")
# DATA2 TIENE EL FORMATO QUE SE CARGARIA AL SQL
data2<-data %>%
select(FUENTE,
periodo,NUMERO,
FECHA,RUC,ELIMINAR,
`NOMBRE CLIENTE`,DOCUMENTO,DESCRIPCION,CANTIDAD,
SUBTOT,DSCZONA,VENDEDOR,ppuni,ppsol,flag,DEPARTAMENTO,LOCALIDAD,PROVINCIA)
# trayendo el excel con todas las localidades para mym con lo cual se cruzará todo
# con esto leo el maestro lansier con el cual cruzare mi data
maestrolansier <- read_xlsx("maestrolansier.xlsx")
localidadesmym <- read_xlsx("localidadesmym.xlsx")
localidadesmym<-localidadesmym %>% select(LOCALIDAD,ZONA)
# PRIMERO CRUZAMOS CONTRA EL MAESTRO LANSIER
# aqui selecciono lo que voy a cruzar
# df1<-data2 %>% select(Artículo)
df2<-maestrolansier %>% select(`M&M`,`artdsc VALID`,TIPO,equipo)
# cambio el nombre a df2 para que coincida el nombre de la columna articulo para poder hacer el merge
colnames(df2)<-c("DESCRIPCION","artdesvalid","tipo","equipo")
# con esto quito los espacios adelante y detrás del artdesvalid Y LOS ARTICULOS
data2$DESCRIPCION<-trimws(data2$DESCRIPCION,"b")
df2$DESCRIPCION<-trimws(df2$DESCRIPCION,"b")
df2$artdesvalid<-trimws(df2$artdesvalid,"b")
# validando productos
productosnuevosmym<-data2[!data2$DESCRIPCION %in% df2$DESCRIPCION,]
View(productosnuevosmym)
write_xlsx(productosnuevosmym,"productosnuevosmym.xlsx")
# trayendo el excel con todas las localidades para mym con lo cual se cruzará todo
# con esto leo el maestro lansier con el cual cruzare mi data
maestrolansier <- read_xlsx("maestrolansier.xlsx")
localidadesmym <- read_xlsx("localidadesmym.xlsx")
localidadesmym<-localidadesmym %>% select(LOCALIDAD,ZONA)
# PRIMERO CRUZAMOS CONTRA EL MAESTRO LANSIER
# aqui selecciono lo que voy a cruzar
# df1<-data2 %>% select(Artículo)
df2<-maestrolansier %>% select(`M&M`,`artdsc VALID`,TIPO,equipo)
# cambio el nombre a df2 para que coincida el nombre de la columna articulo para poder hacer el merge
colnames(df2)<-c("DESCRIPCION","artdesvalid","tipo","equipo")
# con esto quito los espacios adelante y detrás del artdesvalid Y LOS ARTICULOS
data2$DESCRIPCION<-trimws(data2$DESCRIPCION,"b")
df2$DESCRIPCION<-trimws(df2$DESCRIPCION,"b")
df2$artdesvalid<-trimws(df2$artdesvalid,"b")
# validando productos
productosnuevosmym<-data2[!data2$DESCRIPCION %in% df2$DESCRIPCION,]
write_xlsx(productosnuevosmym,"productosnuevosmym.xlsx")
data<-read_xlsx(path = paste0("C:\\Users\\LBarrios\\Downloads\\LANSIER-",
year(today()),
"-",
ifelse(month(today())==12,"DICIEMBRE","ENERO"),
".xlsx" ))
# creando columna fuente que diga M&M
data<-data %>% mutate(FUENTE="M&M")
# creando columna periodo con el primer dia del mes a actualizar
data<-data %>% mutate(periodo=paste0("01/",
ifelse(month(today())<10,paste0("0",month(today())),month(today())),
"/",
year(today())))
# insertando columna ELIMINAR en vacio
data<-data %>% mutate(ELIMINAR="")
# creando columna DSCZONA
data<-data %>% mutate(DSCZONA="")
# creando ppuni ppsol flag dpto dist prov que estaran vacias
data<-data %>% mutate(ppuni="") %>%
mutate(ppsol="") %>% mutate(flag="") %>% mutate(dpto="") %>% mutate(dist="") %>% mutate(prov="")
# DATA2 TIENE EL FORMATO QUE SE CARGARIA AL SQL
data2<-data %>%
select(FUENTE,
periodo,NUMERO,
FECHA,RUC,ELIMINAR,
`NOMBRE CLIENTE`,DOCUMENTO,DESCRIPCION,CANTIDAD,
SUBTOT,DSCZONA,VENDEDOR,ppuni,ppsol,flag,DEPARTAMENTO,LOCALIDAD,PROVINCIA)
# trayendo el excel con todas las localidades para mym con lo cual se cruzará todo
# con esto leo el maestro lansier con el cual cruzare mi data
maestrolansier <- read_xlsx("maestrolansier.xlsx")
localidadesmym <- read_xlsx("localidadesmym.xlsx")
localidadesmym<-localidadesmym %>% select(LOCALIDAD,ZONA)
# PRIMERO CRUZAMOS CONTRA EL MAESTRO LANSIER
# aqui selecciono lo que voy a cruzar
# df1<-data2 %>% select(Artículo)
df2<-maestrolansier %>% select(`M&M`,`artdsc VALID`,TIPO,equipo)
# cambio el nombre a df2 para que coincida el nombre de la columna articulo para poder hacer el merge
colnames(df2)<-c("DESCRIPCION","artdesvalid","tipo","equipo")
# con esto quito los espacios adelante y detrás del artdesvalid Y LOS ARTICULOS
data2$DESCRIPCION<-trimws(data2$DESCRIPCION,"b")
df2$DESCRIPCION<-trimws(df2$DESCRIPCION,"b")
df2$artdesvalid<-trimws(df2$artdesvalid,"b")
# validando productos
productosnuevosmym<-data2[!data2$DESCRIPCION %in% df2$DESCRIPCION,]
write_xlsx(productosnuevosmym,"productosnuevosmym.xlsx")
# ----------------------------------------------------- #
# ---CRUCE DE INFORMACIÓN PARA OBTENER LOS VALIDADOS--- #
# ----------------------------------------------------- #
# cruzando para obtener los validados, tipo y equipo
ArtdesValid2<-merge(x = data2, y = df2, by.x = "DESCRIPCION", all.x = TRUE)
# validando que esten las mismas localidades
localidadesnuevasmym<-ArtdesValid2[!ArtdesValid2$LOCALIDAD %in% localidadesmym$LOCALIDAD,]
write_xlsx(localidadesnuevasmym,"localidadesnuevasmym.xlsx")
#
# CRUZANDO PARA OBTENER LA LOCALIDAD
ArtdesValid3<-merge(x = ArtdesValid2, y=localidadesmym, by.x = "LOCALIDAD", all.x = TRUE)
ArtdesValid3<-ArtdesValid3 %>%
select(FUENTE,periodo,NUMERO,FECHA,RUC,ELIMINAR,`NOMBRE CLIENTE`,DOCUMENTO,DESCRIPCION,artdesvalid,CANTIDAD,
SUBTOT,DSCZONA,ZONA,VENDEDOR,tipo,equipo,ppuni,ppsol,flag,DEPARTAMENTO,LOCALIDAD,PROVINCIA)
write_xlsx(ArtdesValid3,"mym.xlsx")
# en esta ocasion todo ha cruzado asi que esta bien
# este codigo de abajo es para ver si todas las localidades son las mismas
# a<-subset(data, !(LOCALIDAD %in% localidadesmym$LOCALIDAD))
rm(list = ls())
